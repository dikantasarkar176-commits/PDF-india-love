<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>DocuMagic - PDF & Image Tools | Convert, Compress, Edit Online</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary: #4361ee;
            --primary-dark: #3a56d4;
            --secondary: #7209b7;
            --accent: #f72585;
            --light: #f8f9fa;
            --dark: #212529;
            --gray: #6c757d;
            --light-gray: #e9ecef;
            --success: #4cc9f0;
            --border-radius: 12px;
            --shadow: 0 10px 20px rgba(0,0,0,0.1);
            --transition: all 0.3s ease;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', system-ui, sans-serif;
        }

        body {
            background: linear-gradient(135deg, #f5f7fa 0%, #e4e8f0 100%);
            color: var(--dark);
            line-height: 1.6;
            min-height: 100vh;
        }

        .container {
            width: 100%;
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 20px;
        }

        /* Header Styles */
        header {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            box-shadow: var(--shadow);
            position: sticky;
            top: 0;
            z-index: 1000;
        }

        .header-content {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px 0;
        }

        .logo {
            display: flex;
            align-items: center;
            gap: 10px;
            font-size: 1.8rem;
            font-weight: 800;
            color: var(--primary);
            text-decoration: none;
        }

        .logo i {
            color: var(--secondary);
        }

        nav ul {
            display: flex;
            list-style: none;
            gap: 25px;
        }

        nav a {
            text-decoration: none;
            color: var(--dark);
            font-weight: 600;
            font-size: 1rem;
            transition: var(--transition);
            position: relative;
        }

        nav a:hover {
            color: var(--primary);
        }

        nav a::after {
            content: '';
            position: absolute;
            bottom: -5px;
            left: 0;
            width: 0;
            height: 2px;
            background: var(--primary);
            transition: var(--transition);
        }

        nav a:hover::after {
            width: 100%;
        }

        .mobile-menu-btn {
            display: none;
            background: none;
            border: none;
            font-size: 1.5rem;
            cursor: pointer;
            color: var(--dark);
        }

        /* Hero Section */
        .hero {
            padding: 80px 0;
            text-align: center;
            background: linear-gradient(135deg, var(--primary) 0%, var(--secondary) 100%);
            color: white;
            border-radius: 0 0 30px 30px;
            margin-bottom: 50px;
            position: relative;
            overflow: hidden;
        }

        .hero::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1000 100" preserveAspectRatio="none"><path d="M500,50L483,15L469,41L445,9L421,36L399,7L376,32L351,5L327,29L302,6L278,27L253,7L229,26L204,9L180,26L155,12L131,28L106,16L82,32L58,21L35,38L13,27L0,50L13,73L35,62L58,79L82,68L106,84L131,72L155,88L180,74L204,91L229,74L253,93L278,73L302,94L327,71L351,95L376,68L399,93L421,64L445,91L469,59L483,85L500,50Z" fill="rgba(255,255,255,0.1)"/></svg>');
            background-size: cover;
        }

        .hero-content {
            max-width: 800px;
            margin: 0 auto;
            position: relative;
            z-index: 1;
        }

        .hero h1 {
            font-size: 3.2rem;
            margin-bottom: 20px;
            font-weight: 800;
        }

        .hero p {
            font-size: 1.2rem;
            margin-bottom: 30px;
            opacity: 0.9;
        }

        .cta-button {
            display: inline-block;
            background: white;
            color: var(--primary);
            padding: 14px 32px;
            border-radius: 50px;
            text-decoration: none;
            font-weight: 700;
            font-size: 1.1rem;
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
            transition: var(--transition);
        }

        .cta-button:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 20px rgba(0,0,0,0.3);
        }

        /* Tools Grid */
        .section-title {
            text-align: center;
            margin-bottom: 50px;
        }

        .section-title h2 {
            font-size: 2.5rem;
            color: var(--dark);
            margin-bottom: 15px;
            position: relative;
            display: inline-block;
        }

        .section-title h2::after {
            content: '';
            position: absolute;
            bottom: -10px;
            left: 50%;
            transform: translateX(-50%);
            width: 80px;
            height: 4px;
            background: var(--accent);
            border-radius: 2px;
        }

        .section-title p {
            color: var(--gray);
            max-width: 600px;
            margin: 0 auto;
        }

        .tools-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
            gap: 25px;
            margin-bottom: 60px;
        }

        .tool-card {
            background: white;
            border-radius: var(--border-radius);
            box-shadow: var(--shadow);
            padding: 30px 25px;
            text-align: center;
            cursor: pointer;
            transition: var(--transition);
            position: relative;
            overflow: hidden;
            border: 1px solid rgba(0,0,0,0.05);
        }

        .tool-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 5px;
            background: linear-gradient(to right, var(--primary), var(--secondary));
        }

        .tool-card:hover {
            transform: translateY(-10px);
            box-shadow: 0 15px 30px rgba(0,0,0,0.15);
        }

        .tool-icon {
            width: 70px;
            height: 70px;
            margin: 0 auto 20px;
            background: linear-gradient(135deg, var(--primary), var(--secondary));
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 1.8rem;
        }

        .tool-card h3 {
            margin-bottom: 15px;
            color: var(--dark);
            font-size: 1.4rem;
        }

        .tool-card p {
            color: var(--gray);
            font-size: 0.95rem;
        }

        /* Tool Section */
        .tool-section {
            display: none;
            background: white;
            border-radius: var(--border-radius);
            box-shadow: var(--shadow);
            padding: 40px;
            margin-bottom: 50px;
            animation: fadeIn 0.5s ease;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .tool-section.active {
            display: block;
        }

        .tool-header {
            text-align: center;
            margin-bottom: 40px;
        }

        .tool-header h2 {
            color: var(--primary);
            margin-bottom: 10px;
            font-size: 2.2rem;
        }

        .tool-header p {
            color: var(--gray);
            max-width: 600px;
            margin: 0 auto;
        }

        .upload-area {
            border: 2px dashed var(--light-gray);
            border-radius: var(--border-radius);
            padding: 50px 20px;
            text-align: center;
            margin-bottom: 30px;
            transition: var(--transition);
            cursor: pointer;
            background: var(--light);
        }

        .upload-area:hover {
            border-color: var(--primary);
            background: rgba(67, 97, 238, 0.05);
        }

        .upload-area i {
            font-size: 3.5rem;
            color: var(--gray);
            margin-bottom: 20px;
        }

        .upload-area h3 {
            margin-bottom: 10px;
            color: var(--dark);
        }

        .upload-area p {
            color: var(--gray);
            margin-bottom: 20px;
        }

        .btn {
            display: inline-block;
            background: var(--primary);
            color: white;
            padding: 12px 28px;
            border: none;
            border-radius: 50px;
            cursor: pointer;
            font-weight: 600;
            font-size: 1rem;
            transition: var(--transition);
            text-decoration: none;
        }

        .btn:hover {
            background: var(--primary-dark);
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }

        .btn-secondary {
            background: var(--secondary);
        }

        .btn-secondary:hover {
            background: #6511a0;
        }

        .btn-success {
            background: var(--success);
        }

        .btn-success:hover {
            background: #3ab3d6;
        }

        .file-list {
            margin: 25px 0;
        }

        .file-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px;
            border-radius: var(--border-radius);
            background: var(--light);
            margin-bottom: 10px;
        }

        .file-info {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .file-icon {
            font-size: 1.5rem;
            color: var(--primary);
        }

        .file-details h4 {
            margin-bottom: 5px;
        }

        .file-details p {
            color: var(--gray);
            font-size: 0.9rem;
        }

        .file-actions button {
            background: none;
            border: none;
            cursor: pointer;
            color: var(--accent);
            font-size: 1.2rem;
            transition: var(--transition);
        }

        .file-actions button:hover {
            color: #d3126b;
        }

        .options {
            margin: 30px 0;
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 20px;
        }

        .option-group {
            margin-bottom: 20px;
        }

        .option-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: var(--dark);
        }

        .option-group select, .option-group input {
            width: 100%;
            padding: 12px 15px;
            border: 1px solid var(--light-gray);
            border-radius: var(--border-radius);
            background: white;
            font-size: 1rem;
            transition: var(--transition);
        }

        .option-group select:focus, .option-group input:focus {
            border-color: var(--primary);
            outline: none;
            box-shadow: 0 0 0 3px rgba(67, 97, 238, 0.2);
        }

        .progress-container {
            margin: 30px 0;
            display: none;
        }

        .progress-info {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
        }

        .progress-bar {
            height: 10px;
            background-color: var(--light-gray);
            border-radius: 5px;
            overflow: hidden;
        }

        .progress {
            height: 100%;
            background: linear-gradient(to right, var(--primary), var(--secondary));
            width: 0%;
            transition: width 0.4s ease;
        }

        .result-area {
            margin: 30px 0;
            display: none;
            text-align: center;
            padding: 30px;
            background: var(--light);
            border-radius: var(--border-radius);
        }

        .result-preview {
            max-width: 100%;
            max-height: 300px;
            margin: 20px auto;
            display: block;
            border-radius: var(--border-radius);
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }

        .download-btn {
            display: inline-flex;
            align-items: center;
            gap: 10px;
            margin: 20px auto;
        }

        /* Ad Container */
        .ad-container {
            margin: 40px 0;
            text-align: center;
            background: white;
            padding: 25px;
            border-radius: var(--border-radius);
            box-shadow: var(--shadow);
        }

        .ad-label {
            font-size: 0.8rem;
            color: var(--gray);
            margin-bottom: 15px;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        .ad-placeholder {
            height: 250px;
            background: var(--light);
            border-radius: var(--border-radius);
            display: flex;
            align-items: center;
            justify-content: center;
            color: var(--gray);
            font-weight: 600;
        }

        /* Footer */
        footer {
            background: var(--dark);
            color: white;
            padding: 60px 0 30px;
            margin-top: 80px;
        }

        .footer-content {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 40px;
            margin-bottom: 40px;
        }

        .footer-section h3 {
            margin-bottom: 25px;
            font-size: 1.3rem;
            position: relative;
            display: inline-block;
        }

        .footer-section h3::after {
            content: '';
            position: absolute;
            bottom: -8px;
            left: 0;
            width: 40px;
            height: 3px;
            background: var(--accent);
        }

        .footer-section ul {
            list-style: none;
        }

        .footer-section ul li {
            margin-bottom: 12px;
        }

        .footer-section a {
            color: #adb5bd;
            text-decoration: none;
            transition: var(--transition);
        }

        .footer-section a:hover {
            color: white;
            padding-left: 5px;
        }

        .social-links {
            display: flex;
            gap: 15px;
            margin-top: 20px;
        }

        .social-links a {
            display: flex;
            align-items: center;
            justify-content: center;
            width: 40px;
            height: 40px;
            background: rgba(255,255,255,0.1);
            border-radius: 50%;
            transition: var(--transition);
        }

        .social-links a:hover {
            background: var(--primary);
            transform: translateY(-3px);
        }

        .copyright {
            text-align: center;
            padding-top: 30px;
            border-top: 1px solid rgba(255,255,255,0.1);
            color: #adb5bd;
            font-size: 0.9rem;
        }

        /* Responsive Design */
        @media (max-width: 992px) {
            .hero h1 {
                font-size: 2.8rem;
            }
            
            .tools-grid {
                grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            }
        }

        @media (max-width: 768px) {
            .header-content {
                flex-direction: column;
                text-align: center;
                gap: 15px;
            }

            nav ul {
                flex-wrap: wrap;
                justify-content: center;
                gap: 15px;
            }

            .mobile-menu-btn {
                display: block;
                position: absolute;
                top: 20px;
                right: 20px;
            }

            .hero {
                padding: 60px 0;
            }

            .hero h1 {
                font-size: 2.3rem;
            }

            .hero p {
                font-size: 1.1rem;
            }

            .section-title h2 {
                font-size: 2rem;
            }

            .tool-section {
                padding: 30px 20px;
            }

            .options {
                grid-template-columns: 1fr;
            }
        }

        @media (max-width: 576px) {
            .hero h1 {
                font-size: 2rem;
            }
            
            .tools-grid {
                grid-template-columns: 1fr;
            }
            
            .tool-card {
                padding: 25px 20px;
            }
            
            .footer-content {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <!-- Header -->
    <header>
        <div class="container">
            <div class="header-content">
                <a href="#" class="logo">
                    <i class="fas fa-magic"></i>
                    <span>DocuMagic</span>
                </a>
                <nav>
                    <ul>
                        <li><a href="#home">Home</a></li>
                        <li><a href="#tools">Tools</a></li>
                        <li><a href="#features">Features</a></li>
                        <li><a href="#pricing">Pricing</a></li>
                        <li><a href="#contact">Contact</a></li>
                    </ul>
                </nav>
                <button class="mobile-menu-btn">
                    <i class="fas fa-bars"></i>
                </button>
            </div>
        </div>
    </header>

    <!-- Hero Section -->
    <section class="hero" id="home">
        <div class="container">
            <div class="hero-content">
                <h1>All-In-One PDF & Image Tools</h1>
                <p>Convert, compress, edit, and manage your documents and images with our powerful online tools. Fast, secure, and completely free!</p>
                <a href="#tools" class="cta-button">Explore Tools</a>
            </div>
        </div>
    </section>

    <div class="container">
        <!-- Ad Space 1 -->
        <div class="ad-container">
            <div class="ad-label">Advertisement</div>
            <div class="ad-placeholder">
                Google AdSense Ad Unit
            </div>
        </div>

        <!-- Tools Section -->
        <section id="tools">
            <div class="section-title">
                <h2>Our Powerful Tools</h2>
                <p>Choose from our wide range of document and image processing tools</p>
            </div>

            <div class="tools-grid">
                <div class="tool-card" data-tool="pdf-to-jpg">
                    <div class="tool-icon">
                        <i class="fas fa-file-pdf"></i>
                    </div>
                    <h3>PDF to JPG</h3>
                    <p>Convert PDF pages to high-quality JPG images instantly</p>
                </div>
                <div class="tool-card" data-tool="jpg-to-pdf">
                    <div class="tool-icon">
                        <i class="fas fa-file-image"></i>
                    </div>
                    <h3>JPG to PDF</h3>
                    <p>Convert multiple JPG images to a single PDF document</p>
                </div>
                <div class="tool-card" data-tool="image-compress">
                    <div class="tool-icon">
                        <i class="fas fa-compress-alt"></i>
                    </div>
                    <h3>Image Compression</h3>
                    <p>Reduce image file size without losing quality</p>
                </div>
                <div class="tool-card" data-tool="pdf-compress">
                    <div class="tool-icon">
                        <i class="fas fa-file-contract"></i>
                    </div>
                    <h3>PDF Compression</h3>
                    <p>Compress PDF files to reduce their size significantly</p>
                </div>
                <div class="tool-card" data-tool="merge-pdf">
                    <div class="tool-icon">
                        <i class="fas fa-object-group"></i>
                    </div>
                    <h3>Merge PDF</h3>
                    <p>Combine multiple PDF files into a single document</p>
                </div>
                <div class="tool-card" data-tool="split-pdf">
                    <div class="tool-icon">
                        <i class="fas fa-cut"></i>
                    </div>
                    <h3>Split PDF</h3>
                    <p>Split PDF documents into separate files or extract pages</p>
                </div>
                <div class="tool-card" data-tool="pdf-to-word">
                    <div class="tool-icon">
                        <i class="fas fa-file-word"></i>
                    </div>
                    <h3>PDF to Word</h3>
                    <p>Convert PDF files to editable Word documents</p>
                </div>
                <div class="tool-card" data-tool="pdf-to-excel">
                    <div class="tool-icon">
                        <i class="fas fa-file-excel"></i>
                    </div>
                    <h3>PDF to Excel</h3>
                    <p>Extract tables from PDF to Excel spreadsheets</p>
                </div>
                <div class="tool-card" data-tool="excel-to-pdf">
                    <div class="tool-icon">
                        <i class="fas fa-file-export"></i>
                    </div>
                    <h3>Excel to PDF</h3>
                    <p>Convert Excel files to PDF format</p>
                </div>
                <div class="tool-card" data-tool="edit-pdf">
                    <div class="tool-icon">
                        <i class="fas fa-edit"></i>
                    </div>
                    <h3>Edit PDF</h3>
                    <p>Add text, images, and annotations to PDFs</p>
                </div>
                <div class="tool-card" data-tool="remove-pdf">
                    <div class="tool-icon">
                        <i class="fas fa-eraser"></i>
                    </div>
                    <h3>Remove PDF</h3>
                    <p>Delete pages or content from PDF files</p>
                </div>
            </div>
        </section>

        <!-- Tool Sections -->
        <div id="tool-sections">
            <!-- PDF to JPG Tool -->
            <div class="tool-section" id="pdf-to-jpg-tool">
                <div class="tool-header">
                    <h2>PDF to JPG Converter</h2>
                    <p>Convert your PDF pages to high-quality JPG images in seconds</p>
                </div>
                <div class="upload-area" id="pdf-to-jpg-upload">
                    <i class="fas fa-cloud-upload-alt"></i>
                    <h3>Upload Your PDF File</h3>
                    <p>Drag & drop your file here or click to browse</p>
                    <input type="file" id="pdf-to-jpg-input" accept=".pdf" style="display: none;">
                    <button class="btn" id="pdf-to-jpg-browse">Select File</button>
                </div>
                <div class="file-list" id="pdf-to-jpg-file-list"></div>
                <div class="options">
                    <div class="option-group">
                        <label for="pdf-to-jpg-quality">Image Quality</label>
                        <select id="pdf-to-jpg-quality">
                            <option value="high">High Quality</option>
                            <option value="medium" selected>Medium Quality</option>
                            <option value="low">Low Quality</option>
                        </select>
                    </div>
                    <div class="option-group">
                        <label for="pdf-to-jpg-pages">Pages to Convert</label>
                        <select id="pdf-to-jpg-pages">
                            <option value="all">All Pages</option>
                            <option value="range">Specific Pages</option>
                        </select>
                        <input type="text" id="pdf-to-jpg-page-range" placeholder="e.g., 1,3,5-8" style="display: none; margin-top: 10px;">
                    </div>
                </div>
                <div style="text-align: center;">
                    <button class="btn btn-success" id="pdf-to-jpg-convert">Convert to JPG</button>
                </div>
                <div class="progress-container" id="pdf-to-jpg-progress">
                    <div class="progress-info">
                        <span>Processing...</span>
                        <span id="pdf-to-jpg-progress-text">0%</span>
                    </div>
                    <div class="progress-bar">
                        <div class="progress" id="pdf-to-jpg-progress-bar"></div>
                    </div>
                </div>
                <div class="result-area" id="pdf-to-jpg-result">
                    <h3>Conversion Complete!</h3>
                    <div id="pdf-to-jpg-preview"></div>
                    <button class="btn download-btn" id="pdf-to-jpg-download">
                        <i class="fas fa-download"></i> Download JPG Files
                    </button>
                </div>
            </div>

            <!-- Other tool sections would follow the same pattern -->
            <!-- For brevity, I'm showing only one complete tool section -->
        </div>

        <!-- Ad Space 2 -->
        <div class="ad-container">
            <div class="ad-label">Advertisement</div>
            <div class="ad-placeholder">
                Google AdSense Ad Unit
            </div>
        </div>
    </div>

    <!-- Footer -->
    <footer>
        <div class="container">
            <div class="footer-content">
                <div class="footer-section">
                    <h3>DocuMagic</h3>
                    <p>Your all-in-one solution for PDF and image processing. Fast, secure, and completely free to use.</p>
                    <div class="social-links">
                        <a href="#"><i class="fab fa-facebook-f"></i></a>
                        <a href="#"><i class="fab fa-twitter"></i></a>
                        <a href="#"><i class="fab fa-instagram"></i></a>
                        <a href="#"><i class="fab fa-linkedin-in"></i></a>
                    </div>
                </div>
                <div class="footer-section">
                    <h3>PDF Tools</h3>
                    <ul>
                        <li><a href="#">PDF to JPG</a></li>
                        <li><a href="#">JPG to PDF</a></li>
                        <li><a href="#">PDF Compression</a></li>
                        <li><a href="#">Merge PDF</a></li>
                        <li><a href="#">Split PDF</a></li>
                    </ul>
                </div>
                <div class="footer-section">
                    <h3>Image Tools</h3>
                    <ul>
                        <li><a href="#">Image Compression</a></li>
                        <li><a href="#">Edit PDF</a></li>
                        <li><a href="#">Remove PDF</a></li>
                    </ul>
                </div>
                <div class="footer-section">
                    <h3>Company</h3>
                    <ul>
                        <li><a href="#">About Us</a></li>
                        <li><a href="#">Privacy Policy</a></li>
                        <li><a href="#">Terms of Service</a></li>
                        <li><a href="#">Contact Us</a></li>
                    </ul>
                </div>
            </div>
            <div class="copyright">
                <p>&copy; 2023 DocuMagic. All rights reserved.</p>
            </div>
        </div>
    </footer>

    <script>
        // Tool selection functionality
        document.querySelectorAll('.tool-card').forEach(card => {
            card.addEventListener('click', function() {
                const toolId = this.getAttribute('data-tool');
                
                // Hide all tool sections
                document.querySelectorAll('.tool-section').forEach(section => {
                    section.classList.remove('active');
                });
                
                // Show selected tool section
                document.getElementById(`${toolId}-tool`).classList.add('active');
                
                // Scroll to the tool section
                document.getElementById(`${toolId}-tool`).scrollIntoView({ behavior: 'smooth' });
            });
        });

        // File upload functionality for PDF to JPG tool
        const pdfToJpgUpload = document.getElementById('pdf-to-jpg-upload');
        const pdfToJpgInput = document.getElementById('pdf-to-jpg-input');
        const pdfToJpgBrowse = document.getElementById('pdf-to-jpg-browse');
        const pdfToJpgFileList = document.getElementById('pdf-to-jpg-file-list');
        const pdfToJpgConvert = document.getElementById('pdf-to-jpg-convert');
        const pdfToJpgProgress = document.getElementById('pdf-to-jpg-progress');
        const pdfToJpgProgressBar = document.getElementById('pdf-to-jpg-progress-bar');
        const pdfToJpgProgressText = document.getElementById('pdf-to-jpg-progress-text');
        const pdfToJpgResult = document.getElementById('pdf-to-jpg-result');
        const pdfToJpgPreview = document.getElementById('pdf-to-jpg-preview');
        const pdfToJpgDownload = document.getElementById('pdf-to-jpg-download');
        const pdfToJpgPages = document.getElementById('pdf-to-jpg-pages');
        const pdfToJpgPageRange = document.getElementById('pdf-to-jpg-page-range');

        // Show/hide page range input based on selection
        pdfToJpgPages.addEventListener('change', function() {
            if (this.value === 'range') {
                pdfToJpgPageRange.style.display = 'block';
            } else {
                pdfToJpgPageRange.style.display = 'none';
            }
        });

        // Browse button click
        pdfToJpgBrowse.addEventListener('click', function() {
            pdfToJpgInput.click();
        });

        // File input change
        pdfToJpgInput.addEventListener('change', function(e) {
            if (e.target.files.length > 0) {
                handleFileSelection(e.target.files[0]);
            }
        });

        // Drag and drop functionality
        pdfToJpgUpload.addEventListener('dragover', function(e) {
            e.preventDefault();
            this.style.borderColor = 'var(--primary)';
            this.style.backgroundColor = 'rgba(67, 97, 238, 0.05)';
        });

        pdfToJpgUpload.addEventListener('dragleave', function(e) {
            e.preventDefault();
            this.style.borderColor = 'var(--light-gray)';
            this.style.backgroundColor = 'var(--light)';
        });

        pdfToJpgUpload.addEventListener('drop', function(e) {
            e.preventDefault();
            this.style.borderColor = 'var(--light-gray)';
            this.style.backgroundColor = 'var(--light)';
            
            if (e.dataTransfer.files.length > 0) {
                handleFileSelection(e.dataTransfer.files[0]);
            }
        });

        // Handle file selection
        function handleFileSelection(file) {
            if (file.type !== 'application/pdf') {
                alert('Please select a PDF file.');
                return;
            }
            
            // Clear previous file list
            pdfToJpgFileList.innerHTML = '';
            
            // Add file to list
            const fileItem = document.createElement('div');
            fileItem.className = 'file-item';
            fileItem.innerHTML = `
                <div class="file-info">
                    <i class="fas fa-file-pdf file-icon"></i>
                    <div class="file-details">
                        <h4>${file.name}</h4>
                        <p>${formatFileSize(file.size)}</p>
                    </div>
                </div>
                <div class="file-actions">
                    <button class="remove-file"><i class="fas fa-times"></i></button>
                </div>
            `;
            
            pdfToJpgFileList.appendChild(fileItem);
            
            // Remove file functionality
            fileItem.querySelector('.remove-file').addEventListener('click', function() {
                pdfToJpgFileList.innerHTML = '';
                pdfToJpgInput.value = '';
            });
        }

        // Format file size
        function formatFileSize(bytes) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        }

        // Convert button click
        pdfToJpgConvert.addEventListener('click', function() {
            if (pdfToJpgFileList.children.length === 0) {
                alert('Please select a PDF file first.');
                return;
            }
            
            // Show progress
            pdfToJpgProgress.style.display = 'block';
            pdfToJpgProgressBar.style.width = '0%';
            pdfToJpgProgressText.textContent = '0%';
            
            // Simulate conversion process
            let progress = 0;
            const interval = setInterval(() => {
                progress += Math.random() * 10;
                if (progress >= 100) {
                    progress = 100;
                    clearInterval(interval);
                    
                    // Show result
                    pdfToJpgProgressText.textContent = '100%';
                    pdfToJpgResult.style.display = 'block';
                    
                    // Add sample preview (in a real app, this would be the actual converted images)
                    pdfToJpgPreview.innerHTML = `
                        <p>Your PDF has been converted to ${Math.floor(Math.random() * 10) + 1} JPG images.</p>
                        <img src="https://images.unsplash.com/photo-1541701494587-cb58502866ab?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=500&q=80" alt="Sample JPG" class="result-preview">
                    `;
                }
                
                pdfToJpgProgressBar.style.width = `${progress}%`;
                pdfToJpgProgressText.textContent = `${Math.round(progress)}%`;
            }, 200);
        });

        // Download button click
        pdfToJpgDownload.addEventListener('click', function() {
            alert('In a real application, this would download the converted JPG files.');
        });

        // Mobile menu functionality
        const mobileMenuBtn = document.querySelector('.mobile-menu-btn');
        const nav = document.querySelector('nav');
        
        mobileMenuBtn.addEventListener('click', function() {
            nav.style.display = nav.style.display === 'flex' ? 'none' : 'flex';
        });

        // Responsive adjustments
        window.addEventListener('resize', function() {
            if (window.innerWidth > 768) {
                nav.style.display = 'flex';
            } else {
                nav.style.display = 'none';
            }
        });
    </script>
</body>
</html> 
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>JPG to PDF Converter | DocuMagic</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <style>
        :root {
            --primary: #4361ee;
            --primary-dark: #3a56d4;
            --secondary: #7209b7;
            --accent: #f72585;
            --light: #f8f9fa;
            --dark: #212529;
            --gray: #6c757d;
            --light-gray: #e9ecef;
            --success: #4cc9f0;
            --border-radius: 12px;
            --shadow: 0 10px 20px rgba(0,0,0,0.1);
            --transition: all 0.3s ease;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', system-ui, sans-serif;
        }

        body {
            background: linear-gradient(135deg, #f5f7fa 0%, #e4e8f0 100%);
            color: var(--dark);
            line-height: 1.6;
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            width: 100%;
            max-width: 1000px;
            margin: 0 auto;
            padding: 0 20px;
        }

        header {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            box-shadow: var(--shadow);
            border-radius: var(--border-radius);
            position: sticky;
            top: 20px;
            z-index: 1000;
            margin-bottom: 30px;
        }

        .header-content {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px 25px;
        }

        .logo {
            display: flex;
            align-items: center;
            gap: 10px;
            font-size: 1.8rem;
            font-weight: 800;
            color: var(--primary);
            text-decoration: none;
        }

        .logo i {
            color: var(--secondary);
        }

        .tool-section {
            background: white;
            border-radius: var(--border-radius);
            box-shadow: var(--shadow);
            padding: 40px;
            margin-bottom: 30px;
            animation: fadeIn 0.5s ease;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .tool-header {
            text-align: center;
            margin-bottom: 40px;
        }

        .tool-header h2 {
            color: var(--primary);
            margin-bottom: 10px;
            font-size: 2.2rem;
        }

        .tool-header p {
            color: var(--gray);
            max-width: 600px;
            margin: 0 auto;
        }

        .upload-area {
            border: 2px dashed var(--light-gray);
            border-radius: var(--border-radius);
            padding: 50px 20px;
            text-align: center;
            margin-bottom: 30px;
            transition: var(--transition);
            cursor: pointer;
            background: var(--light);
        }

        .upload-area:hover {
            border-color: var(--primary);
            background: rgba(67, 97, 238, 0.05);
        }

        .upload-area.active {
            border-color: var(--primary);
            background: rgba(67, 97, 238, 0.08);
        }

        .upload-area i {
            font-size: 3.5rem;
            color: var(--gray);
            margin-bottom: 20px;
        }

        .upload-area h3 {
            margin-bottom: 10px;
            color: var(--dark);
        }

        .upload-area p {
            color: var(--gray);
            margin-bottom: 20px;
        }

        .btn {
            display: inline-block;
            background: var(--primary);
            color: white;
            padding: 12px 28px;
            border: none;
            border-radius: 50px;
            cursor: pointer;
            font-weight: 600;
            font-size: 1rem;
            transition: var(--transition);
            text-decoration: none;
        }

        .btn:hover {
            background: var(--primary-dark);
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }

        .btn-secondary {
            background: var(--secondary);
        }

        .btn-secondary:hover {
            background: #6511a0;
        }

        .btn-success {
            background: var(--success);
        }

        .btn-success:hover {
            background: #3ab3d6;
        }

        .btn:disabled {
            background: var(--light-gray);
            color: var(--gray);
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

        .file-list {
            margin: 25px 0;
        }

        .file-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px;
            border-radius: var(--border-radius);
            background: var(--light);
            margin-bottom: 10px;
            transition: var(--transition);
        }

        .file-item:hover {
            background: #e9ecef;
        }

        .file-info {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .file-icon {
            font-size: 1.5rem;
            color: var(--primary);
        }

        .file-details h4 {
            margin-bottom: 5px;
        }

        .file-details p {
            color: var(--gray);
            font-size: 0.9rem;
        }

        .file-actions button {
            background: none;
            border: none;
            cursor: pointer;
            color: var(--accent);
            font-size: 1.2rem;
            transition: var(--transition);
        }

        .file-actions button:hover {
            color: #d3126b;
        }

        .options {
            margin: 30px 0;
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 20px;
        }

        .option-group {
            margin-bottom: 20px;
        }

        .option-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: var(--dark);
        }

        .option-group select, .option-group input {
            width: 100%;
            padding: 12px 15px;
            border: 1px solid var(--light-gray);
            border-radius: var(--border-radius);
            background: white;
            font-size: 1rem;
            transition: var(--transition);
        }

        .option-group select:focus, .option-group input:focus {
            border-color: var(--primary);
            outline: none;
            box-shadow: 0 0 0 3px rgba(67, 97, 238, 0.2);
        }

        .progress-container {
            margin: 30px 0;
            display: none;
        }

        .progress-info {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
        }

        .progress-bar {
            height: 10px;
            background-color: var(--light-gray);
            border-radius: 5px;
            overflow: hidden;
        }

        .progress {
            height: 100%;
            background: linear-gradient(to right, var(--primary), var(--secondary));
            width: 0%;
            transition: width 0.4s ease;
        }

        .result-area {
            margin: 30px 0;
            display: none;
            text-align: center;
            padding: 30px;
            background: var(--light);
            border-radius: var(--border-radius);
        }

        .result-preview {
            max-width: 100%;
            max-height: 300px;
            margin: 20px auto;
            display: block;
            border-radius: var(--border-radius);
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }

        .download-btn {
            display: inline-flex;
            align-items: center;
            gap: 10px;
            margin: 20px auto;
        }

        .image-previews {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
            gap: 15px;
            margin: 20px 0;
        }

        .image-preview {
            position: relative;
            border-radius: var(--border-radius);
            overflow: hidden;
            box-shadow: 0 3px 10px rgba(0,0,0,0.1);
        }

        .image-preview img {
            width: 100%;
            height: 120px;
            object-fit: cover;
            display: block;
        }

        .image-preview .page-number {
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            background: rgba(0,0,0,0.7);
            color: white;
            text-align: center;
            padding: 5px;
            font-size: 0.8rem;
        }

        .empty-state {
            text-align: center;
            padding: 30px;
            color: var(--gray);
        }

        .empty-state i {
            font-size: 3rem;
            margin-bottom: 15px;
            color: var(--light-gray);
        }

        @media (max-width: 768px) {
            .tool-section {
                padding: 30px 20px;
            }

            .options {
                grid-template-columns: 1fr;
            }

            .image-previews {
                grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
            }
        }

        @media (max-width: 576px) {
            .tool-header h2 {
                font-size: 1.8rem;
            }

            .upload-area {
                padding: 30px 15px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <div class="header-content">
                <a href="#" class="logo">
                    <i class="fas fa-magic"></i>
                    <span>DocuMagic</span>
                </a>
            </div>
        </header>

        <!-- JPG to PDF Tool Section -->
        <div class="tool-section active" id="jpg-to-pdf-tool">
            <div class="tool-header">
                <h2>JPG to PDF Converter</h2>
                <p>Convert multiple JPG images to a single PDF document</p>
            </div>
            
            <div class="upload-area" id="jpg-to-pdf-upload">
                <i class="fas fa-cloud-upload-alt"></i>
                <h3>Upload Your JPG Images</h3>
                <p>Drag & drop your files here or click to browse (multiple files supported)</p>
                <input type="file" id="jpg-to-pdf-input" accept=".jpg,.jpeg,.png" multiple style="display: none;">
                <button class="btn" id="jpg-to-pdf-browse">Select Files</button>
            </div>
            
            <div class="file-list" id="jpg-to-pdf-file-list">
                <div class="empty-state" id="jpg-to-pdf-empty">
                    <i class="fas fa-folder-open"></i>
                    <p>No files selected yet</p>
                </div>
            </div>
            
            <div class="image-previews" id="jpg-to-pdf-previews"></div>
            
            <div class="options">
                <div class="option-group">
                    <label for="jpg-to-pdf-orientation">Page Orientation</label>
                    <select id="jpg-to-pdf-orientation">
                        <option value="portrait">Portrait</option>
                        <option value="landscape">Landscape</option>
                        <option value="auto">Auto (Match Image)</option>
                    </select>
                </div>
                <div class="option-group">
                    <label for="jpg-to-pdf-size">Page Size</label>
                    <select id="jpg-to-pdf-size">
                        <option value="a4">A4</option>
                        <option value="letter">Letter</option>
                        <option value="legal">Legal</option>
                        <option value="auto">Auto (Match Image)</option>
                    </select>
                </div>
                <div class="option-group">
                    <label for="jpg-to-pdf-margin">Page Margin (mm)</label>
                    <input type="number" id="jpg-to-pdf-margin" min="0" max="50" value="10">
                </div>
            </div>
            
            <div style="text-align: center;">
                <button class="btn btn-success" id="jpg-to-pdf-convert" disabled>Convert to PDF</button>
            </div>
            
            <div class="progress-container" id="jpg-to-pdf-progress">
                <div class="progress-info">
                    <span>Processing...</span>
                    <span id="jpg-to-pdf-progress-text">0%</span>
                </div>
                <div class="progress-bar">
                    <div class="progress" id="jpg-to-pdf-progress-bar"></div>
                </div>
            </div>
            
            <div class="result-area" id="jpg-to-pdf-result">
                <h3>Conversion Complete!</h3>
                <p>Your PDF is ready for download</p>
                <div id="jpg-to-pdf-preview"></div>
                <button class="btn download-btn" id="jpg-to-pdf-download">
                    <i class="fas fa-download"></i> Download PDF
                </button>
            </div>
        </div>
    </div>

    <script>
        // Initialize jsPDF
        const { jsPDF } = window.jspdf;

        // DOM elements
        const jpgToPdfUpload = document.getElementById('jpg-to-pdf-upload');
        const jpgToPdfInput = document.getElementById('jpg-to-pdf-input');
        const jpgToPdfBrowse = document.getElementById('jpg-to-pdf-browse');
        const jpgToPdfFileList = document.getElementById('jpg-to-pdf-file-list');
        const jpgToPdfEmpty = document.getElementById('jpg-to-pdf-empty');
        const jpgToPdfPreviews = document.getElementById('jpg-to-pdf-previews');
        const jpgToPdfConvert = document.getElementById('jpg-to-pdf-convert');
        const jpgToPdfProgress = document.getElementById('jpg-to-pdf-progress');
        const jpgToPdfProgressBar = document.getElementById('jpg-to-pdf-progress-bar');
        const jpgToPdfProgressText = document.getElementById('jpg-to-pdf-progress-text');
        const jpgToPdfResult = document.getElementById('jpg-to-pdf-result');
        const jpgToPdfPreview = document.getElementById('jpg-to-pdf-preview');
        const jpgToPdfDownload = document.getElementById('jpg-to-pdf-download');

        // Store selected files
        let selectedFiles = [];

        // Browse button click
        jpgToPdfBrowse.addEventListener('click', function() {
            jpgToPdfInput.click();
        });

        // File input change
        jpgToPdfInput.addEventListener('change', function(e) {
            if (e.target.files.length > 0) {
                handleFileSelection(Array.from(e.target.files));
            }
        });

        // Drag and drop functionality
        jpgToPdfUpload.addEventListener('dragover', function(e) {
            e.preventDefault();
            this.classList.add('active');
        });

        jpgToPdfUpload.addEventListener('dragleave', function(e) {
            e.preventDefault();
            this.classList.remove('active');
        });

        jpgToPdfUpload.addEventListener('drop', function(e) {
            e.preventDefault();
            this.classList.remove('active');
            
            if (e.dataTransfer.files.length > 0) {
                handleFileSelection(Array.from(e.dataTransfer.files));
            }
        });

        // Handle file selection
        function handleFileSelection(files) {
            // Filter only image files
            const imageFiles = files.filter(file => 
                file.type === 'image/jpeg' || 
                file.type === 'image/jpg' || 
                file.type === 'image/png'
            );
            
            if (imageFiles.length === 0) {
                alert('Please select valid JPG or PNG image files.');
                return;
            }
            
            // Add files to our array
            selectedFiles = [...selectedFiles, ...imageFiles];
            
            // Update UI
            updateFileList();
            updatePreviews();
            updateConvertButton();
        }

        // Update file list display
        function updateFileList() {
            if (selectedFiles.length === 0) {
                jpgToPdfEmpty.style.display = 'block';
                jpgToPdfFileList.innerHTML = '';
                jpgToPdfFileList.appendChild(jpgToPdfEmpty);
                return;
            }
            
            jpgToPdfEmpty.style.display = 'none';
            
            // Clear existing list (except empty state)
            const fileListItems = jpgToPdfFileList.querySelectorAll('.file-item');
            fileListItems.forEach(item => item.remove());
            
            // Add files to list
            selectedFiles.forEach((file, index) => {
                const fileItem = document.createElement('div');
                fileItem.className = 'file-item';
                fileItem.innerHTML = `
                    <div class="file-info">
                        <i class="fas fa-file-image file-icon"></i>
                        <div class="file-details">
                            <h4>${file.name}</h4>
                            <p>${formatFileSize(file.size)} • Page ${index + 1}</p>
                        </div>
                    </div>
                    <div class="file-actions">
                        <button class="remove-file" data-index="${index}"><i class="fas fa-times"></i></button>
                    </div>
                `;
                
                jpgToPdfFileList.appendChild(fileItem);
            });
            
            // Add event listeners to remove buttons
            document.querySelectorAll('.remove-file').forEach(button => {
                button.addEventListener('click', function() {
                    const index = parseInt(this.getAttribute('data-index'));
                    removeFile(index);
                });
            });
        }

        // Update image previews
        function updatePreviews() {
            jpgToPdfPreviews.innerHTML = '';
            
            if (selectedFiles.length === 0) return;
            
            selectedFiles.forEach((file, index) => {
                const reader = new FileReader();
                
                reader.onload = function(e) {
                    const preview = document.createElement('div');
                    preview.className = 'image-preview';
                    preview.innerHTML = `
                        <img src="${e.target.result}" alt="${file.name}">
                        <div class="page-number">Page ${index + 1}</div>
                    `;
                    jpgToPdfPreviews.appendChild(preview);
                };
                
                reader.readAsDataURL(file);
            });
        }

        // Remove a file
        function removeFile(index) {
            selectedFiles.splice(index, 1);
            updateFileList();
            updatePreviews();
            updateConvertButton();
        }

        // Update convert button state
        function updateConvertButton() {
            jpgToPdfConvert.disabled = selectedFiles.length === 0;
        }

        // Format file size
        function formatFileSize(bytes) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        }

        // Convert button click
        jpgToPdfConvert.addEventListener('click', function() {
            if (selectedFiles.length === 0) {
                alert('Please select at least one JPG image first.');
                return;
            }
            
            // Show progress
            jpgToPdfProgress.style.display = 'block';
            jpgToPdfProgressBar.style.width = '0%';
            jpgToPdfProgressText.textContent = '0%';
            
            // Start conversion
            convertToPdf();
        });

        // Convert images to PDF
        async function convertToPdf() {
            try {
                // Get options
                const orientation = document.getElementById('jpg-to-pdf-orientation').value;
                const pageSize = document.getElementById('jpg-to-pdf-size').value;
                const margin = parseInt(document.getElementById('jpg-to-pdf-margin').value);
                
                // Initialize PDF
                const pdf = new jsPDF({
                    orientation: orientation === 'auto' ? 'portrait' : orientation,
                    unit: 'mm',
                    format: pageSize === 'auto' ? 'a4' : pageSize
                });
                
                let progress = 0;
                const progressIncrement = 100 / selectedFiles.length;
                
                // Process each image
                for (let i = 0; i < selectedFiles.length; i++) {
                    const file = selectedFiles[i];
                    
                    // Update progress
                    progress += progressIncrement;
                    jpgToPdfProgressBar.style.width = `${Math.min(progress, 100)}%`;
                    jpgToPdfProgressText.textContent = `${Math.round(Math.min(progress, 100))}%`;
                    
                    // Add page (except for first image)
                    if (i > 0) {
                        pdf.addPage();
                    }
                    
                    // Convert image to data URL
                    const imageDataUrl = await fileToDataURL(file);
                    
                    // Get page dimensions
                    const pageWidth = pdf.internal.pageSize.getWidth();
                    const pageHeight = pdf.internal.pageSize.getHeight();
                    
                    // Calculate available space for image
                    const availableWidth = pageWidth - (margin * 2);
                    const availableHeight = pageHeight - (margin * 2);
                    
                    // Create image element to get dimensions
                    const img = new Image();
                    await new Promise((resolve) => {
                        img.onload = resolve;
                        img.src = imageDataUrl;
                    });
                    
                    // Calculate dimensions to fit page
                    let imgWidth = img.width;
                    let imgHeight = img.height;
                    
                    // Adjust orientation if needed
                    if (orientation === 'auto') {
                        const isLandscape = imgWidth > imgHeight;
                        if (isLandscape && pdf.internal.pageSize.getWidth() < pdf.internal.pageSize.getHeight()) {
                            pdf.deletePage(i + 1);
                            pdf.addPage([pdf.internal.pageSize.getHeight(), pdf.internal.pageSize.getWidth()], isLandscape ? 'landscape' : 'portrait');
                        }
                    }
                    
                    // Scale image to fit available space
                    const widthRatio = availableWidth / imgWidth;
                    const heightRatio = availableHeight / imgHeight;
                    const ratio = Math.min(widthRatio, heightRatio);
                    
                    imgWidth = imgWidth * ratio;
                    imgHeight = imgHeight * ratio;
                    
                    // Center image on page
                    const x = (pageWidth - imgWidth) / 2;
                    const y = (pageHeight - imgHeight) / 2;
                    
                    // Add image to PDF
                    pdf.addImage(imageDataUrl, 'JPEG', x, y, imgWidth, imgHeight);
                }
                
                // Complete progress
                jpgToPdfProgressBar.style.width = '100%';
                jpgToPdfProgressText.textContent = '100%';
                
                // Generate PDF blob
                const pdfBlob = pdf.output('blob');
                const pdfUrl = URL.createObjectURL(pdfBlob);
                
                // Show result
                jpgToPdfResult.style.display = 'block';
                jpgToPdfPreview.innerHTML = `
                    <p>Your ${selectedFiles.length} image(s) have been converted to a PDF document.</p>
                    <embed src="${pdfUrl}" type="application/pdf" width="100%" height="400px">
                `;
                
                // Set up download
                jpgToPdfDownload.onclick = function() {
                    const link = document.createElement('a');
                    link.href = pdfUrl;
                    link.download = 'converted-images.pdf';
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);
                };
                
            } catch (error) {
                console.error('Error converting to PDF:', error);
                alert('An error occurred during conversion. Please try again.');
            }
        }

        // Convert file to data URL
        function fileToDataURL(file) {
            return new Promise((resolve, reject) => {
                const reader = new FileReader();
                reader.onload = () => resolve(reader.result);
                reader.onerror = reject;
                reader.readAsDataURL(file);
            });
        }
    </script>
</body>
</html> 
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>DocuMagic - All-in-One PDF & Image Tools</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <style>
        :root {
            --primary: #4361ee;
            --primary-dark: #3a56d4;
            --secondary: #7209b7;
            --accent: #f72585;
            --light: #f8f9fa;
            --dark: #212529;
            --gray: #6c757d;
            --light-gray: #e9ecef;
            --success: #4cc9f0;
            --warning: #ff9e00;
            --danger: #e63946;
            --border-radius: 12px;
            --shadow: 0 10px 20px rgba(0,0,0,0.1);
            --transition: all 0.3s ease;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', system-ui, sans-serif;
        }

        body {
            background: linear-gradient(135deg, #f5f7fa 0%, #e4e8f0 100%);
            color: var(--dark);
            line-height: 1.6;
            min-height: 100vh;
        }

        .container {
            width: 100%;
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 20px;
        }

        /* Header Styles */
        header {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            box-shadow: var(--shadow);
            position: sticky;
            top: 0;
            z-index: 1000;
        }

        .header-content {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px 0;
        }

        .logo {
            display: flex;
            align-items: center;
            gap: 10px;
            font-size: 1.8rem;
            font-weight: 800;
            color: var(--primary);
            text-decoration: none;
        }

        .logo i {
            color: var(--secondary);
        }

        nav ul {
            display: flex;
            list-style: none;
            gap: 25px;
        }

        nav a {
            text-decoration: none;
            color: var(--dark);
            font-weight: 600;
            font-size: 1rem;
            transition: var(--transition);
            position: relative;
        }

        nav a:hover {
            color: var(--primary);
        }

        nav a::after {
            content: '';
            position: absolute;
            bottom: -5px;
            left: 0;
            width: 0;
            height: 2px;
            background: var(--primary);
            transition: var(--transition);
        }

        nav a:hover::after {
            width: 100%;
        }

        .mobile-menu-btn {
            display: none;
            background: none;
            border: none;
            font-size: 1.5rem;
            cursor: pointer;
            color: var(--dark);
        }

        /* Hero Section */
        .hero {
            padding: 80px 0;
            text-align: center;
            background: linear-gradient(135deg, var(--primary) 0%, var(--secondary) 100%);
            color: white;
            border-radius: 0 0 30px 30px;
            margin-bottom: 50px;
            position: relative;
            overflow: hidden;
        }

        .hero::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1000 100" preserveAspectRatio="none"><path d="M500,50L483,15L469,41L445,9L421,36L399,7L376,32L351,5L327,29L302,6L278,27L253,7L229,26L204,9L180,26L155,12L131,28L106,16L82,32L58,21L35,38L13,27L0,50L13,73L35,62L58,79L82,68L106,84L131,72L155,88L180,74L204,91L229,74L253,93L278,73L302,94L327,71L351,95L376,68L399,93L421,64L445,91L469,59L483,85L500,50Z" fill="rgba(255,255,255,0.1)"/></svg>');
            background-size: cover;
        }

        .hero-content {
            max-width: 800px;
            margin: 0 auto;
            position: relative;
            z-index: 1;
        }

        .hero h1 {
            font-size: 3.2rem;
            margin-bottom: 20px;
            font-weight: 800;
        }

        .hero p {
            font-size: 1.2rem;
            margin-bottom: 30px;
            opacity: 0.9;
        }

        .cta-button {
            display: inline-block;
            background: white;
            color: var(--primary);
            padding: 14px 32px;
            border-radius: 50px;
            text-decoration: none;
            font-weight: 700;
            font-size: 1.1rem;
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
            transition: var(--transition);
        }

        .cta-button:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 20px rgba(0,0,0,0.3);
        }

        /* Tools Grid */
        .section-title {
            text-align: center;
            margin-bottom: 50px;
        }

        .section-title h2 {
            font-size: 2.5rem;
            color: var(--dark);
            margin-bottom: 15px;
            position: relative;
            display: inline-block;
        }

        .section-title h2::after {
            content: '';
            position: absolute;
            bottom: -10px;
            left: 50%;
            transform: translateX(-50%);
            width: 80px;
            height: 4px;
            background: var(--accent);
            border-radius: 2px;
        }

        .section-title p {
            color: var(--gray);
            max-width: 600px;
            margin: 0 auto;
        }

        .tools-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
            gap: 25px;
            margin-bottom: 60px;
        }

        .tool-card {
            background: white;
            border-radius: var(--border-radius);
            box-shadow: var(--shadow);
            padding: 30px 25px;
            text-align: center;
            cursor: pointer;
            transition: var(--transition);
            position: relative;
            overflow: hidden;
            border: 1px solid rgba(0,0,0,0.05);
        }

        .tool-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 5px;
            background: linear-gradient(to right, var(--primary), var(--secondary));
        }

        .tool-card:hover {
            transform: translateY(-10px);
            box-shadow: 0 15px 30px rgba(0,0,0,0.15);
        }

        .tool-icon {
            width: 70px;
            height: 70px;
            margin: 0 auto 20px;
            background: linear-gradient(135deg, var(--primary), var(--secondary));
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 1.8rem;
        }

        .tool-card h3 {
            margin-bottom: 15px;
            color: var(--dark);
            font-size: 1.4rem;
        }

        .tool-card p {
            color: var(--gray);
            font-size: 0.95rem;
        }

        /* Tool Section */
        .tool-section {
            display: none;
            background: white;
            border-radius: var(--border-radius);
            box-shadow: var(--shadow);
            padding: 40px;
            margin-bottom: 50px;
            animation: fadeIn 0.5s ease;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .tool-section.active {
            display: block;
        }

        .tool-header {
            text-align: center;
            margin-bottom: 40px;
        }

        .tool-header h2 {
            color: var(--primary);
            margin-bottom: 10px;
            font-size: 2.2rem;
        }

        .tool-header p {
            color: var(--gray);
            max-width: 600px;
            margin: 0 auto;
        }

        .upload-area {
            border: 2px dashed var(--light-gray);
            border-radius: var(--border-radius);
            padding: 50px 20px;
            text-align: center;
            margin-bottom: 30px;
            transition: var(--transition);
            cursor: pointer;
            background: var(--light);
        }

        .upload-area:hover {
            border-color: var(--primary);
            background: rgba(67, 97, 238, 0.05);
        }

        .upload-area.active {
            border-color: var(--primary);
            background: rgba(67, 97, 238, 0.08);
        }

        .upload-area i {
            font-size: 3.5rem;
            color: var(--gray);
            margin-bottom: 20px;
        }

        .upload-area h3 {
            margin-bottom: 10px;
            color: var(--dark);
        }

        .upload-area p {
            color: var(--gray);
            margin-bottom: 20px;
        }

        .btn {
            display: inline-block;
            background: var(--primary);
            color: white;
            padding: 12px 28px;
            border: none;
            border-radius: 50px;
            cursor: pointer;
            font-weight: 600;
            font-size: 1rem;
            transition: var(--transition);
            text-decoration: none;
        }

        .btn:hover {
            background: var(--primary-dark);
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }

        .btn-secondary {
            background: var(--secondary);
        }

        .btn-secondary:hover {
            background: #6511a0;
        }

        .btn-success {
            background: var(--success);
        }

        .btn-success:hover {
            background: #3ab3d6;
        }

        .btn-warning {
            background: var(--warning);
        }

        .btn-warning:hover {
            background: #e68e00;
        }

        .btn-danger {
            background: var(--danger);
        }

        .btn-danger:hover {
            background: #d32f3a;
        }

        .btn:disabled {
            background: var(--light-gray);
            color: var(--gray);
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

        .file-list {
            margin: 25px 0;
        }

        .file-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px;
            border-radius: var(--border-radius);
            background: var(--light);
            margin-bottom: 10px;
            transition: var(--transition);
        }

        .file-item:hover {
            background: #e9ecef;
        }

        .file-info {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .file-icon {
            font-size: 1.5rem;
            color: var(--primary);
        }

        .file-details h4 {
            margin-bottom: 5px;
        }

        .file-details p {
            color: var(--gray);
            font-size: 0.9rem;
        }

        .file-actions button {
            background: none;
            border: none;
            cursor: pointer;
            color: var(--accent);
            font-size: 1.2rem;
            transition: var(--transition);
        }

        .file-actions button:hover {
            color: #d3126b;
        }

        .options {
            margin: 30px 0;
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 20px;
        }

        .option-group {
            margin-bottom: 20px;
        }

        .option-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: var(--dark);
        }

        .option-group select, .option-group input {
            width: 100%;
            padding: 12px 15px;
            border: 1px solid var(--light-gray);
            border-radius: var(--border-radius);
            background: white;
            font-size: 1rem;
            transition: var(--transition);
        }

        .option-group select:focus, .option-group input:focus {
            border-color: var(--primary);
            outline: none;
            box-shadow: 0 0 0 3px rgba(67, 97, 238, 0.2);
        }

        .progress-container {
            margin: 30px 0;
            display: none;
        }

        .progress-info {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
        }

        .progress-bar {
            height: 10px;
            background-color: var(--light-gray);
            border-radius: 5px;
            overflow: hidden;
        }

        .progress {
            height: 100%;
            background: linear-gradient(to right, var(--primary), var(--secondary));
            width: 0%;
            transition: width 0.4s ease;
        }

        .result-area {
            margin: 30px 0;
            display: none;
            text-align: center;
            padding: 30px;
            background: var(--light);
            border-radius: var(--border-radius);
        }

        .result-preview {
            max-width: 100%;
            max-height: 300px;
            margin: 20px auto;
            display: block;
            border-radius: var(--border-radius);
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }

        .download-btn {
            display: inline-flex;
            align-items: center;
            gap: 10px;
            margin: 20px auto;
        }

        .image-previews {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
            gap: 15px;
            margin: 20px 0;
        }

        .image-preview {
            position: relative;
            border-radius: var(--border-radius);
            overflow: hidden;
            box-shadow: 0 3px 10px rgba(0,0,0,0.1);
        }

        .image-preview img {
            width: 100%;
            height: 120px;
            object-fit: cover;
            display: block;
        }

        .image-preview .page-number {
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            background: rgba(0,0,0,0.7);
            color: white;
            text-align: center;
            padding: 5px;
            font-size: 0.8rem;
        }

        .empty-state {
            text-align: center;
            padding: 30px;
            color: var(--gray);
        }

        .empty-state i {
            font-size: 3rem;
            margin-bottom: 15px;
            color: var(--light-gray);
        }

        /* Ad Container */
        .ad-container {
            margin: 40px 0;
            text-align: center;
            background: white;
            padding: 25px;
            border-radius: var(--border-radius);
            box-shadow: var(--shadow);
        }

        .ad-label {
            font-size: 0.8rem;
            color: var(--gray);
            margin-bottom: 15px;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        .ad-placeholder {
            height: 250px;
            background: var(--light);
            border-radius: var(--border-radius);
            display: flex;
            align-items: center;
            justify-content: center;
            color: var(--gray);
            font-weight: 600;
        }

        /* Footer */
        footer {
            background: var(--dark);
            color: white;
            padding: 60px 0 30px;
            margin-top: 80px;
        }

        .footer-content {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 40px;
            margin-bottom: 40px;
        }

        .footer-section h3 {
            margin-bottom: 25px;
            font-size: 1.3rem;
            position: relative;
            display: inline-block;
        }

        .footer-section h3::after {
            content: '';
            position: absolute;
            bottom: -8px;
            left: 0;
            width: 40px;
            height: 3px;
            background: var(--accent);
        }

        .footer-section ul {
            list-style: none;
        }

        .footer-section ul li {
            margin-bottom: 12px;
        }

        .footer-section a {
            color: #adb5bd;
            text-decoration: none;
            transition: var(--transition);
        }

        .footer-section a:hover {
            color: white;
            padding-left: 5px;
        }

        .social-links {
            display: flex;
            gap: 15px;
            margin-top: 20px;
        }

        .social-links a {
            display: flex;
            align-items: center;
            justify-content: center;
            width: 40px;
            height: 40px;
            background: rgba(255,255,255,0.1);
            border-radius: 50%;
            transition: var(--transition);
        }

        .social-links a:hover {
            background: var(--primary);
            transform: translateY(-3px);
        }

        .copyright {
            text-align: center;
            padding-top: 30px;
            border-top: 1px solid rgba(255,255,255,0.1);
            color: #adb5bd;
            font-size: 0.9rem;
        }

        /* Responsive Design */
        @media (max-width: 992px) {
            .hero h1 {
                font-size: 2.8rem;
            }
            
            .tools-grid {
                grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            }
        }

        @media (max-width: 768px) {
            .header-content {
                flex-direction: column;
                text-align: center;
                gap: 15px;
            }

            nav ul {
                flex-wrap: wrap;
                justify-content: center;
                gap: 15px;
            }

            .mobile-menu-btn {
                display: block;
                position: absolute;
                top: 20px;
                right: 20px;
            }

            .hero {
                padding: 60px 0;
            }

            .hero h1 {
                font-size: 2.3rem;
            }

            .hero p {
                font-size: 1.1rem;
            }

            .section-title h2 {
                font-size: 2rem;
            }

            .tool-section {
                padding: 30px 20px;
            }

            .options {
                grid-template-columns: 1fr;
            }
        }

        @media (max-width: 576px) {
            .hero h1 {
                font-size: 2rem;
            }
            
            .tools-grid {
                grid-template-columns: 1fr;
            }
            
            .tool-card {
                padding: 25px 20px;
            }
            
            .footer-content {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <!-- Header -->
    <header>
        <div class="container">
            <div class="header-content">
                <a href="#" class="logo">
                    <i class="fas fa-magic"></i>
                    <span>DocuMagic</span>
                </a>
                <nav>
                    <ul>
                        <li><a href="#home">Home</a></li>
                        <li><a href="#tools">Tools</a></li>
                        <li><a href="#features">Features</a></li>
                        <li><a href="#pricing">Pricing</a></li>
                        <li><a href="#contact">Contact</a></li>
                    </ul>
                </nav>
                <button class="mobile-menu-btn">
                    <i class="fas fa-bars"></i>
                </button>
            </div>
        </div>
    </header>

    <!-- Hero Section -->
    <section class="hero" id="home">
        <div class="container">
            <div class="hero-content">
                <h1>All-In-One PDF & Image Tools</h1>
                <p>Convert, compress, edit, and manage your documents and images with our powerful online tools. Fast, secure, and completely free!</p>
                <a href="#tools" class="cta-button">Explore Tools</a>
            </div>
        </div>
    </section>

    <div class="container">
        <!-- Ad Space 1 -->
        <div class="ad-container">
            <div class="ad-label">Advertisement</div>
            <div class="ad-placeholder">
                Google AdSense Ad Unit
            </div>
        </div>

        <!-- Tools Section -->
        <section id="tools">
            <div class="section-title">
                <h2>Our Powerful Tools</h2>
                <p>Choose from our wide range of document and image processing tools</p>
            </div>

            <div class="tools-grid">
                <div class="tool-card" data-tool="jpg-to-pdf">
                    <div class="tool-icon">
                        <i class="fas fa-file-image"></i>
                    </div>
                    <h3>JPG to PDF</h3>
                    <p>Convert multiple JPG images to a single PDF document</p>
                </div>
                <div class="tool-card" data-tool="image-compress">
                    <div class="tool-icon">
                        <i class="fas fa-compress-alt"></i>
                    </div>
                    <h3>Image Compression</h3>
                    <p>Reduce image file size without losing quality</p>
                </div>
                <div class="tool-card" data-tool="pdf-compress">
                    <div class="tool-icon">
                        <i class="fas fa-file-contract"></i>
                    </div>
                    <h3>PDF Compression</h3>
                    <p>Compress PDF files to reduce their size significantly</p>
                </div>
                <div class="tool-card" data-tool="merge-pdf">
                    <div class="tool-icon">
                        <i class="fas fa-object-group"></i>
                    </div>
                    <h3>Merge PDF</h3>
                    <p>Combine multiple PDF files into a single document</p>
                </div>
                <div class="tool-card" data-tool="split-pdf">
                    <div class="tool-icon">
                        <i class="fas fa-cut"></i>
                    </div>
                    <h3>Split PDF</h3>
                    <p>Split PDF documents into separate files or extract pages</p>
                </div>
                <div class="tool-card" data-tool="pdf-to-word">
                    <div class="tool-icon">
                        <i class="fas fa-file-word"></i>
                    </div>
                    <h3>PDF to Word</h3>
                    <p>Convert PDF files to editable Word documents</p>
                </div>
                <div class="tool-card" data-tool="pdf-to-excel">
                    <div class="tool-icon">
                        <i class="fas fa-file-excel"></i>
                    </div>
                    <h3>PDF to Excel</h3>
                    <p>Extract tables from PDF to Excel spreadsheets</p>
                </div>
                <div class="tool-card" data-tool="excel-to-pdf">
                    <div class="tool-icon">
                        <i class="fas fa-file-export"></i>
                    </div>
                    <h3>Excel to PDF</h3>
                    <p>Convert Excel files to PDF format</p>
                </div>
                <div class="tool-card" data-tool="edit-pdf">
                    <div class="tool-icon">
                        <i class="fas fa-edit"></i>
                    </div>
                    <h3>Edit PDF</h3>
                    <p>Add text, images, and annotations to PDFs</p>
                </div>
                <div class="tool-card" data-tool="remove-pdf">
                    <div class="tool-icon">
                        <i class="fas fa-eraser"></i>
                    </div>
                    <h3>Remove PDF</h3>
                    <p>Delete pages or content from PDF files</p>
                </div>
            </div>
        </section>

        <!-- Tool Sections -->
        <div id="tool-sections">
            <!-- JPG to PDF Tool -->
            <div class="tool-section" id="jpg-to-pdf-tool">
                <div class="tool-header">
                    <h2>JPG to PDF Converter</h2>
                    <p>Convert multiple JPG images to a single PDF document</p>
                </div>
                
                <div class="upload-area" id="jpg-to-pdf-upload">
                    <i class="fas fa-cloud-upload-alt"></i>
                    <h3>Upload Your JPG Images</h3>
                    <p>Drag & drop your files here or click to browse (multiple files supported)</p>
                    <input type="file" id="jpg-to-pdf-input" accept=".jpg,.jpeg,.png" multiple style="display: none;">
                    <button class="btn" id="jpg-to-pdf-browse">Select Files</button>
                </div>
                
                <div class="file-list" id="jpg-to-pdf-file-list">
                    <div class="empty-state" id="jpg-to-pdf-empty">
                        <i class="fas fa-folder-open"></i>
                        <p>No files selected yet</p>
                    </div>
                </div>
                
                <div class="image-previews" id="jpg-to-pdf-previews"></div>
                
                <div class="options">
                    <div class="option-group">
                        <label for="jpg-to-pdf-orientation">Page Orientation</label>
                        <select id="jpg-to-pdf-orientation">
                            <option value="portrait">Portrait</option>
                            <option value="landscape">Landscape</option>
                            <option value="auto">Auto (Match Image)</option>
                        </select>
                    </div>
                    <div class="option-group">
                        <label for="jpg-to-pdf-size">Page Size</label>
                        <select id="jpg-to-pdf-size">
                            <option value="a4">A4</option>
                            <option value="letter">Letter</option>
                            <option value="legal">Legal</option>
                            <option value="auto">Auto (Match Image)</option>
                        </select>
                    </div>
                    <div class="option-group">
                        <label for="jpg-to-pdf-margin">Page Margin (mm)</label>
                        <input type="number" id="jpg-to-pdf-margin" min="0" max="50" value="10">
                    </div>
                </div>
                
                <div style="text-align: center;">
                    <button class="btn btn-success" id="jpg-to-pdf-convert" disabled>Convert to PDF</button>
                </div>
                
                <div class="progress-container" id="jpg-to-pdf-progress">
                    <div class="progress-info">
                        <span>Processing...</span>
                        <span id="jpg-to-pdf-progress-text">0%</span>
                    </div>
                    <div class="progress-bar">
                        <div class="progress" id="jpg-to-pdf-progress-bar"></div>
                    </div>
                </div>
                
                <div class="result-area" id="jpg-to-pdf-result">
                    <h3>Conversion Complete!</h3>
                    <p>Your PDF is ready for download</p>
                    <div id="jpg-to-pdf-preview"></div>
                    <button class="btn download-btn" id="jpg-to-pdf-download">
                        <i class="fas fa-download"></i> Download PDF
                    </button>
                </div>
            </div>

            <!-- Image Compression Tool -->
            <div class="tool-section" id="image-compress-tool">
                <div class="tool-header">
                    <h2>Image Compression</h2>
                    <p>Reduce image file size without losing quality</p>
                </div>
                
                <div class="upload-area" id="image-compress-upload">
                    <i class="fas fa-cloud-upload-alt"></i>
                    <h3>Upload Your Images</h3>
                    <p>Drag & drop your files here or click to browse (multiple files supported)</p>
                    <input type="file" id="image-compress-input" accept=".jpg,.jpeg,.png,.gif,.webp" multiple style="display: none;">
                    <button class="btn" id="image-compress-browse">Select Files</button>
                </div>
                
                <div class="file-list" id="image-compress-file-list">
                    <div class="empty-state" id="image-compress-empty">
                        <i class="fas fa-folder-open"></i>
                        <p>No files selected yet</p>
                    </div>
                </div>
                
                <div class="options">
                    <div class="option-group">
                        <label for="image-compress-quality">Compression Quality</label>
                        <select id="image-compress-quality">
                            <option value="high">High Quality (Large Size)</option>
                            <option value="medium" selected>Medium Quality (Balanced)</option>
                            <option value="low">Low Quality (Smallest Size)</option>
                        </select>
                    </div>
                    <div class="option-group">
                        <label for="image-compress-format">Output Format</label>
                        <select id="image-compress-format">
                            <option value="original">Keep Original Format</option>
                            <option value="jpg">JPG</option>
                            <option value="png">PNG</option>
                            <option value="webp">WebP</option>
                        </select>
                    </div>
                    <div class="option-group">
                        <label for="image-compress-max-width">Max Width (px)</label>
                        <input type="number" id="image-compress-max-width" min="100" max="4000" value="1920">
                    </div>
                </div>
                
                <div style="text-align: center;">
                    <button class="btn btn-success" id="image-compress-convert" disabled>Compress Images</button>
                </div>
                
                <div class="progress-container" id="image-compress-progress">
                    <div class="progress-info">
                        <span>Processing...</span>
                        <span id="image-compress-progress-text">0%</span>
                    </div>
                    <div class="progress-bar">
                        <div class="progress" id="image-compress-progress-bar"></div>
                    </div>
                </div>
                
                <div class="result-area" id="image-compress-result">
                    <h3>Compression Complete!</h3>
                    <p>Your compressed images are ready for download</p>
                    <div id="image-compress-preview"></div>
                    <button class="btn download-btn" id="image-compress-download">
                        <i class="fas fa-download"></i> Download Compressed Images
                    </button>
                </div>
            </div>

            <!-- Other tool sections would follow the same pattern -->
            <!-- For brevity, I'm showing only two complete tool sections -->
            
            <!-- PDF Compression Tool (simplified) -->
            <div class="tool-section" id="pdf-compress-tool">
                <div class="tool-header">
                    <h2>PDF Compression</h2>
                    <p>Compress PDF files to reduce their size significantly</p>
                </div>
                <!-- Similar structure as above -->
            </div>
            
            <!-- Additional tool sections would be here -->
        </div>

        <!-- Ad Space 2 -->
        <div class="ad-container">
            <div class="ad-label">Advertisement</div>
            <div class="ad-placeholder">
                Google AdSense Ad Unit
            </div>
        </div>
    </div>

    <!-- Footer -->
    <footer>
        <div class="container">
            <div class="footer-content">
                <div class="footer-section">
                    <h3>DocuMagic</h3>
                    <p>Your all-in-one solution for PDF and image processing. Fast, secure, and completely free to use.</p>
                    <div class="social-links">
                        <a href="#"><i class="fab fa-facebook-f"></i></a>
                        <a href="#"><i class="fab fa-twitter"></i></a>
                        <a href="#"><i class="fab fa-instagram"></i></a>
                        <a href="#"><i class="fab fa-linkedin-in"></i></a>
                    </div>
                </div>
                <div class="footer-section">
                    <h3>PDF Tools</h3>
                    <ul>
                        <li><a href="#jpg-to-pdf">JPG to PDF</a></li>
                        <li><a href="#pdf-compress">PDF Compression</a></li>
                        <li><a href="#merge-pdf">Merge PDF</a></li>
                        <li><a href="#split-pdf">Split PDF</a></li>
                    </ul>
                </div>
                <div class="footer-section">
                    <h3>Image Tools</h3>
                    <ul>
                        <li><a href="#image-compress">Image Compression</a></li>
                        <li><a href="#edit-pdf">Edit PDF</a></li>
                        <li><a href="#remove-pdf">Remove PDF</a></li>
                    </ul>
                </div>
                <div class="footer-section">
                    <h3>Company</h3>
                    <ul>
                        <li><a href="#">About Us</a></li>
                        <li><a href="#">Privacy Policy</a></li>
                        <li><a href="#">Terms of Service</a></li>
                        <li><a href="#">Contact Us</a></li>
                    </ul>
                </div>
            </div>
            <div class="copyright">
                <p>&copy; 2023 DocuMagic. All rights reserved.</p>
            </div>
        </div>
    </footer>

    <script>
        // Initialize jsPDF
        const { jsPDF } = window.jspdf;

        // Tool selection functionality
        document.querySelectorAll('.tool-card').forEach(card => {
            card.addEventListener('click', function() {
                const toolId = this.getAttribute('data-tool');
                
                // Hide all tool sections
                document.querySelectorAll('.tool-section').forEach(section => {
                    section.classList.remove('active');
                });
                
                // Show selected tool section
                document.getElementById(`${toolId}-tool`).classList.add('active');
                
                // Scroll to the tool section
                document.getElementById(`${toolId}-tool`).scrollIntoView({ behavior: 'smooth' });
            });
        });

        // JPG to PDF Tool Implementation
        const jpgToPdfUpload = document.getElementById('jpg-to-pdf-upload');
        const jpgToPdfInput = document.getElementById('jpg-to-pdf-input');
        const jpgToPdfBrowse = document.getElementById('jpg-to-pdf-browse');
        const jpgToPdfFileList = document.getElementById('jpg-to-pdf-file-list');
        const jpgToPdfEmpty = document.getElementById('jpg-to-pdf-empty');
        const jpgToPdfPreviews = document.getElementById('jpg-to-pdf-previews');
        const jpgToPdfConvert = document.getElementById('jpg-to-pdf-convert');
        const jpgToPdfProgress = document.getElementById('jpg-to-pdf-progress');
        const jpgToPdfProgressBar = document.getElementById('jpg-to-pdf-progress-bar');
        const jpgToPdfProgressText = document.getElementById('jpg-to-pdf-progress-text');
        const jpgToPdfResult = document.getElementById('jpg-to-pdf-result');
        const jpgToPdfPreview = document.getElementById('jpg-to-pdf-preview');
        const jpgToPdfDownload = document.getElementById('jpg-to-pdf-download');

        // Store selected files
        let selectedFiles = [];

        // Browse button click
        jpgToPdfBrowse.addEventListener('click', function() {
            jpgToPdfInput.click();
        });

        // File input change
        jpgToPdfInput.addEventListener('change', function(e) {
            if (e.target.files.length > 0) {
                handleFileSelection(Array.from(e.target.files));
            }
        });

        // Drag and drop functionality
        jpgToPdfUpload.addEventListener('dragover', function(e) {
            e.preventDefault();
            this.classList.add('active');
        });

        jpgToPdfUpload.addEventListener('dragleave', function(e) {
            e.preventDefault();
            this.classList.remove('active');
        });

        jpgToPdfUpload.addEventListener('drop', function(e) {
            e.preventDefault();
            this.classList.remove('active');
            
            if (e.dataTransfer.files.length > 0) {
                handleFileSelection(Array.from(e.dataTransfer.files));
            }
        });

        // Handle file selection
        function handleFileSelection(files) {
            // Filter only image files
            const imageFiles = files.filter(file => 
                file.type === 'image/jpeg' || 
                file.type === 'image/jpg' || 
                file.type === 'image/png'
            );
            
            if (imageFiles.length === 0) {
                alert('Please select valid JPG or PNG image files.');
                return;
            }
            
            // Add files to our array
            selectedFiles = [...selectedFiles, ...imageFiles];
            
            // Update UI
            updateFileList();
            updatePreviews();
            updateConvertButton();
        }

        // Update file list display
        function updateFileList() {
            if (selectedFiles.length === 0) {
                jpgToPdfEmpty.style.display = 'block';
                jpgToPdfFileList.innerHTML = '';
                jpgToPdfFileList.appendChild(jpgToPdfEmpty);
                return;
            }
            
            jpgToPdfEmpty.style.display = 'none';
            
            // Clear existing list (except empty state)
            const fileListItems = jpgToPdfFileList.querySelectorAll('.file-item');
            fileListItems.forEach(item => item.remove());
            
            // Add files to list
            selectedFiles.forEach((file, index) => {
                const fileItem = document.createElement('div');
                fileItem.className = 'file-item';
                fileItem.innerHTML = `
                    <div class="file-info">
                        <i class="fas fa-file-image file-icon"></i>
                        <div class="file-details">
                            <h4>${file.name}</h4>
                            <p>${formatFileSize(file.size)} • Page ${index + 1}</p>
                        </div>
                    </div>
                    <div class="file-actions">
                        <button class="remove-file" data-index="${index}"><i class="fas fa-times"></i></button>
                    </div>
                `;
                
                jpgToPdfFileList.appendChild(fileItem);
            });
            
            // Add event listeners to remove buttons
            document.querySelectorAll('.remove-file').forEach(button => {
                button.addEventListener('click', function() {
                    const index = parseInt(this.getAttribute('data-index'));
                    removeFile(index);
                });
            });
        }

        // Update image previews
        function updatePreviews() {
            jpgToPdfPreviews.innerHTML = '';
            
            if (selectedFiles.length === 0) return;
            
            selectedFiles.forEach((file, index) => {
                const reader = new FileReader();
                
                reader.onload = function(e) {
                    const preview = document.createElement('div');
                    preview.className = 'image-preview';
                    preview.innerHTML = `
                        <img src="${e.target.result}" alt="${file.name}">
                        <div class="page-number">Page ${index + 1}</div>
                    `;
                    jpgToPdfPreviews.appendChild(preview);
                };
                
                reader.readAsDataURL(file);
            });
        }

        // Remove a file
        function removeFile(index) {
            selectedFiles.splice(index, 1);
            updateFileList();
            updatePreviews();
            updateConvertButton();
        }

        // Update convert button state
        function updateConvertButton() {
            jpgToPdfConvert.disabled = selectedFiles.length === 0;
        }

        // Format file size
        function formatFileSize(bytes) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        }

        // Convert button click
        jpgToPdfConvert.addEventListener('click', function() {
            if (selectedFiles.length === 0) {
                alert('Please select at least one JPG image first.');
                return;
            }
            
            // Show progress
            jpgToPdfProgress.style.display = 'block';
            jpgToPdfProgressBar.style.width = '0%';
            jpgToPdfProgressText.textContent = '0%';
            
            // Start conversion
            convertToPdf();
        });

        // Convert images to PDF
        async function convertToPdf() {
            try {
                // Get options
                const orientation = document.getElementById('jpg-to-pdf-orientation').value;
                const pageSize = document.getElementById('jpg-to-pdf-size').value;
                const margin = parseInt(document.getElementById('jpg-to-pdf-margin').value);
                
                // Initialize PDF
                const pdf = new jsPDF({
                    orientation: orientation === 'auto' ? 'portrait' : orientation,
                    unit: 'mm',
                    format: pageSize === 'auto' ? 'a4' : pageSize
                });
                
                let progress = 0;
                const progressIncrement = 100 / selectedFiles.length;
                
                // Process each image
                for (let i = 0; i < selectedFiles.length; i++) {
                    const file = selectedFiles[i];
                    
                    // Update progress
                    progress += progressIncrement;
                    jpgToPdfProgressBar.style.width = `${Math.min(progress, 100)}%`;
                    jpgToPdfProgressText.textContent = `${Math.round(Math.min(progress, 100))}%`;
                    
                    // Add page (except for first image)
                    if (i > 0) {
                        pdf.addPage();
                    }
                    
                    // Convert image to data URL
                    const imageDataUrl = await fileToDataURL(file);
                    
                    // Get page dimensions
                    const pageWidth = pdf.internal.pageSize.getWidth();
                    const pageHeight = pdf.internal.pageSize.getHeight();
                    
                    // Calculate available space for image
                    const availableWidth = pageWidth - (margin * 2);
                    const availableHeight = pageHeight - (margin * 2);
                    
                    // Create image element to get dimensions
                    const img = new Image();
                    await new Promise((resolve) => {
                        img.onload = resolve;
                        img.src = imageDataUrl;
                    });
                    
                    // Calculate dimensions to fit page
                    let imgWidth = img.width;
                    let imgHeight = img.height;
                    
                    // Adjust orientation if needed
                    if (orientation === 'auto') {
                        const isLandscape = imgWidth > imgHeight;
                        if (isLandscape && pdf.internal.pageSize.getWidth() < pdf.internal.pageSize.getHeight()) {
                            pdf.deletePage(i + 1);
                            pdf.addPage([pdf.internal.pageSize.getHeight(), pdf.internal.pageSize.getWidth()], isLandscape ? 'landscape' : 'portrait');
                        }
                    }
                    
                    // Scale image to fit available space
                    const widthRatio = availableWidth / imgWidth;
                    const heightRatio = availableHeight / imgHeight;
                    const ratio = Math.min(widthRatio, heightRatio);
                    
                    imgWidth = imgWidth * ratio;
                    imgHeight = imgHeight * ratio;
                    
                    // Center image on page
                    const x = (pageWidth - imgWidth) / 2;
                    const y = (pageHeight - imgHeight) / 2;
                    
                    // Add image to PDF
                    pdf.addImage(imageDataUrl, 'JPEG', x, y, imgWidth, imgHeight);
                }
                
                // Complete progress
                jpgToPdfProgressBar.style.width = '100%';
                jpgToPdfProgressText.textContent = '100%';
                
                // Generate PDF blob
                const pdfBlob = pdf.output('blob');
                const pdfUrl = URL.createObjectURL(pdfBlob);
                
                // Show result
                jpgToPdfResult.style.display = 'block';
                jpgToPdfPreview.innerHTML = `
                    <p>Your ${selectedFiles.length} image(s) have been converted to a PDF document.</p>
                    <embed src="${pdfUrl}" type="application/pdf" width="100%" height="400px">
                `;
                
                // Set up download
                jpgToPdfDownload.onclick = function() {
                    const link = document.createElement('a');
                    link.href = pdfUrl;
                    link.download = 'converted-images.pdf';
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);
                };
                
            } catch (error) {
                console.error('Error converting to PDF:', error);
                alert('An error occurred during conversion. Please try again.');
            }
        }

        // Convert file to data URL
        function fileToDataURL(file) {
            return new Promise((resolve, reject) => {
                const reader = new FileReader();
                reader.onload = () => resolve(reader.result);
                reader.onerror = reject;
                reader.readAsDataURL(file);
            });
        }

        // Image Compression Tool Implementation
        const imageCompressUpload = document.getElementById('image-compress-upload');
        const imageCompressInput = document.getElementById('image-compress-input');
        const imageCompressBrowse = document.getElementById('image-compress-browse');
        const imageCompressFileList = document.getElementById('image-compress-file-list');
        const imageCompressEmpty = document.getElementById('image-compress-empty');
        const imageCompressConvert = document.getElementById('image-compress-convert');
        const imageCompressProgress = document.getElementById('image-compress-progress');
        const imageCompressProgressBar = document.getElementById('image-compress-progress-bar');
        const imageCompressProgressText = document.getElementById('image-compress-progress-text');
        const imageCompressResult = document.getElementById('image-compress-result');
        const imageCompressPreview = document.getElementById('image-compress-preview');
        const imageCompressDownload = document.getElementById('image-compress-download');

        // Store selected files for compression
        let selectedCompressFiles = [];

        // Browse button click
        imageCompressBrowse.addEventListener('click', function() {
            imageCompressInput.click();
        });

        // File input change
        imageCompressInput.addEventListener('change', function(e) {
            if (e.target.files.length > 0) {
                handleCompressFileSelection(Array.from(e.target.files));
            }
        });

        // Drag and drop functionality
        imageCompressUpload.addEventListener('dragover', function(e) {
            e.preventDefault();
            this.classList.add('active');
        });

        imageCompressUpload.addEventListener('dragleave', function(e) {
            e.preventDefault();
            this.classList.remove('active');
        });

        imageCompressUpload.addEventListener('drop', function(e) {
            e.preventDefault();
            this.classList.remove('active');
            
            if (e.dataTransfer.files.length > 0) {
                handleCompressFileSelection(Array.from(e.dataTransfer.files));
            }
        });

        // Handle file selection for compression
        function handleCompressFileSelection(files) {
            // Filter only image files
            const imageFiles = files.filter(file => 
                file.type === 'image/jpeg' || 
                file.type === 'image/jpg' || 
                file.type === 'image/png' ||
                file.type === 'image/gif' ||
                file.type === 'image/webp'
            );
            
            if (imageFiles.length === 0) {
                alert('Please select valid image files (JPG, PNG, GIF, WebP).');
                return;
            }
            
            // Add files to our array
            selectedCompressFiles = [...selectedCompressFiles, ...imageFiles];
            
            // Update UI
            updateCompressFileList();
            updateCompressConvertButton();
        }

        // Update file list display for compression
        function updateCompressFileList() {
            if (selectedCompressFiles.length === 0) {
                imageCompressEmpty.style.display = 'block';
                imageCompressFileList.innerHTML = '';
                imageCompressFileList.appendChild(imageCompressEmpty);
                return;
            }
            
            imageCompressEmpty.style.display = 'none';
            
            // Clear existing list (except empty state)
            const fileListItems = imageCompressFileList.querySelectorAll('.file-item');
            fileListItems.forEach(item => item.remove());
            
            // Add files to list
            selectedCompressFiles.forEach((file, index) => {
                const fileItem = document.createElement('div');
                fileItem.className = 'file-item';
                fileItem.innerHTML = `
                    <div class="file-info">
                        <i class="fas fa-file-image file-icon"></i>
                        <div class="file-details">
                            <h4>${file.name}</h4>
                            <p>${formatFileSize(file.size)}</p>
                        </div>
                    </div>
                    <div class="file-actions">
                        <button class="remove-file" data-index="${index}"><i class="fas fa-times"></i></button>
                    </div>
                `;
                
                imageCompressFileList.appendChild(fileItem);
            });
            
            // Add event listeners to remove buttons
            document.querySelectorAll('.remove-file').forEach(button => {
                button.addEventListener('click', function() {
                    const index = parseInt(this.getAttribute('data-index'));
                    removeCompressFile(index);
                });
            });
        }

        // Remove a file from compression list
        function removeCompressFile(index) {
            selectedCompressFiles.splice(index, 1);
            updateCompressFileList();
            updateCompressConvertButton();
        }

        // Update compress button state
        function updateCompressConvertButton() {
            imageCompressConvert.disabled = selectedCompressFiles.length === 0;
        }

        // Compress button click
        imageCompressConvert.addEventListener('click', function() {
            if (selectedCompressFiles.length === 0) {
                alert('Please select at least one image first.');
                return;
            }
            
            // Show progress
            imageCompressProgress.style.display = 'block';
            imageCompressProgressBar.style.width = '0%';
            imageCompressProgressText.textContent = '0%';
            
            // Start compression
            compressImages();
        });

        // Compress images
        async function compressImages() {
            try {
                // Get options
                const quality = document.getElementById('image-compress-quality').value;
                const format = document.getElementById('image-compress-format').value;
                const maxWidth = parseInt(document.getElementById('image-compress-max-width').value);
                
                let progress = 0;
                const progressIncrement = 100 / selectedCompressFiles.length;
                
                // Process each image
                const compressedImages = [];
                
                for (let i = 0; i < selectedCompressFiles.length; i++) {
                    const file = selectedCompressFiles[i];
                    
                    // Update progress
                    progress += progressIncrement;
                    imageCompressProgressBar.style.width = `${Math.min(progress, 100)}%`;
                    imageCompressProgressText.textContent = `${Math.round(Math.min(progress, 100))}%`;
                    
                    // Compress image
                    const compressedImage = await compressImage(file, quality, format, maxWidth);
                    compressedImages.push(compressedImage);
                }
                
                // Complete progress
                imageCompressProgressBar.style.width = '100%';
                imageCompressProgressText.textContent = '100%';
                
                // Calculate total savings
                const originalSize = selectedCompressFiles.reduce((sum, file) => sum + file.size, 0);
                const compressedSize = compressedImages.reduce((sum, img) => sum + img.size, 0);
                const savings = originalSize - compressedSize;
                const savingsPercent = ((savings / originalSize) * 100).toFixed(1);
                
                // Show result
                imageCompressResult.style.display = 'block';
                imageCompressPreview.innerHTML = `
                    <p>Successfully compressed ${selectedCompressFiles.length} image(s)!</p>
                    <p>Original size: ${formatFileSize(originalSize)}</p>
                    <p>Compressed size: ${formatFileSize(compressedSize)}</p>
                    <p>Space saved: ${formatFileSize(savings)} (${savingsPercent}%)</p>
                `;
                
                // Set up download (in a real implementation, this would create a ZIP file)
                imageCompressDownload.onclick = function() {
                    alert('In a real implementation, this would download the compressed images.');
                };
                
            } catch (error) {
                console.error('Error compressing images:', error);
                alert('An error occurred during compression. Please try again.');
            }
        }

        // Compress a single image
        function compressImage(file, quality, format, maxWidth) {
            return new Promise((resolve, reject) => {
                const reader = new FileReader();
                
                reader.onload = function(e) {
                    const img = new Image();
                    
                    img.onload = function() {
                        // Calculate new dimensions
                        let width = img.width;
                        let height = img.height;
                        
                        if (width > maxWidth) {
                            height = (height * maxWidth) / width;
                            width = maxWidth;
                        }
                        
                        // Create canvas
                        const canvas = document.createElement('canvas');
                        canvas.width = width;
                        canvas.height = height;
                        
                        // Draw image on canvas
                        const ctx = canvas.getContext('2d');
                        ctx.drawImage(img, 0, 0, width, height);
                        
                        // Determine quality
                        let qualityValue = 1.0;
                        if (quality === 'medium') qualityValue = 0.7;
                        if (quality === 'low') qualityValue = 0.4;
                        
                        // Convert to blob
                        canvas.toBlob((blob) => {
                            resolve({
                                name: file.name,
                                blob: blob,
                                size: blob.size
                            });
                        }, `image/${format === 'original' ? file.type.split('/')[1] : format}`, qualityValue);
                    };
                    
                    img.onerror = reject;
                    img.src = e.target.result;
                };
                
                reader.onerror = reject;
                reader.readAsDataURL(file);
            });
        }

        // Mobile menu functionality
        const mobileMenuBtn = document.querySelector('.mobile-menu-btn');
        const nav = document.querySelector('nav');
        
        mobileMenuBtn.addEventListener('click', function() {
            nav.style.display = nav.style.display === 'flex' ? 'none' : 'flex';
        });

        // Responsive adjustments
        window.addEventListener('resize', function() {
            if (window.innerWidth > 768) {
                nav.style.display = 'flex';
            } else {
                nav.style.display = 'none';
            }
        });
    </script>
</body>
</html>  
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PDF Compression Tool | DocuMagic</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf-lib/1.17.1/pdf-lib.min.js"></script>
    <style>
        :root {
            --primary: #4361ee;
            --primary-dark: #3a56d4;
            --secondary: #7209b7;
            --accent: #f72585;
            --light: #f8f9fa;
            --dark: #212529;
            --gray: #6c757d;
            --light-gray: #e9ecef;
            --success: #4cc9f0;
            --warning: #ff9e00;
            --danger: #e63946;
            --border-radius: 12px;
            --shadow: 0 10px 20px rgba(0,0,0,0.1);
            --transition: all 0.3s ease;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', system-ui, sans-serif;
        }

        body {
            background: linear-gradient(135deg, #f5f7fa 0%, #e4e8f0 100%);
            color: var(--dark);
            line-height: 1.6;
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            width: 100%;
            max-width: 1000px;
            margin: 0 auto;
            padding: 0 20px;
        }

        header {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            box-shadow: var(--shadow);
            border-radius: var(--border-radius);
            position: sticky;
            top: 20px;
            z-index: 1000;
            margin-bottom: 30px;
        }

        .header-content {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px 25px;
        }

        .logo {
            display: flex;
            align-items: center;
            gap: 10px;
            font-size: 1.8rem;
            font-weight: 800;
            color: var(--primary);
            text-decoration: none;
        }

        .logo i {
            color: var(--secondary);
        }

        .tool-section {
            background: white;
            border-radius: var(--border-radius);
            box-shadow: var(--shadow);
            padding: 40px;
            margin-bottom: 30px;
            animation: fadeIn 0.5s ease;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .tool-header {
            text-align: center;
            margin-bottom: 40px;
        }

        .tool-header h2 {
            color: var(--primary);
            margin-bottom: 10px;
            font-size: 2.2rem;
        }

        .tool-header p {
            color: var(--gray);
            max-width: 600px;
            margin: 0 auto;
        }

        .upload-area {
            border: 2px dashed var(--light-gray);
            border-radius: var(--border-radius);
            padding: 50px 20px;
            text-align: center;
            margin-bottom: 30px;
            transition: var(--transition);
            cursor: pointer;
            background: var(--light);
        }

        .upload-area:hover {
            border-color: var(--primary);
            background: rgba(67, 97, 238, 0.05);
        }

        .upload-area.active {
            border-color: var(--primary);
            background: rgba(67, 97, 238, 0.08);
        }

        .upload-area i {
            font-size: 3.5rem;
            color: var(--gray);
            margin-bottom: 20px;
        }

        .upload-area h3 {
            margin-bottom: 10px;
            color: var(--dark);
        }

        .upload-area p {
            color: var(--gray);
            margin-bottom: 20px;
        }

        .btn {
            display: inline-block;
            background: var(--primary);
            color: white;
            padding: 12px 28px;
            border: none;
            border-radius: 50px;
            cursor: pointer;
            font-weight: 600;
            font-size: 1rem;
            transition: var(--transition);
            text-decoration: none;
        }

        .btn:hover {
            background: var(--primary-dark);
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }

        .btn-secondary {
            background: var(--secondary);
        }

        .btn-secondary:hover {
            background: #6511a0;
        }

        .btn-success {
            background: var(--success);
        }

        .btn-success:hover {
            background: #3ab3d6;
        }

        .btn-warning {
            background: var(--warning);
        }

        .btn-warning:hover {
            background: #e68e00;
        }

        .btn-danger {
            background: var(--danger);
        }

        .btn-danger:hover {
            background: #d32f3a;
        }

        .btn:disabled {
            background: var(--light-gray);
            color: var(--gray);
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

        .file-list {
            margin: 25px 0;
        }

        .file-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px;
            border-radius: var(--border-radius);
            background: var(--light);
            margin-bottom: 10px;
            transition: var(--transition);
        }

        .file-item:hover {
            background: #e9ecef;
        }

        .file-info {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .file-icon {
            font-size: 1.5rem;
            color: var(--primary);
        }

        .file-details h4 {
            margin-bottom: 5px;
        }

        .file-details p {
            color: var(--gray);
            font-size: 0.9rem;
        }

        .file-actions button {
            background: none;
            border: none;
            cursor: pointer;
            color: var(--accent);
            font-size: 1.2rem;
            transition: var(--transition);
        }

        .file-actions button:hover {
            color: #d3126b;
        }

        .options {
            margin: 30px 0;
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 20px;
        }

        .option-group {
            margin-bottom: 20px;
        }

        .option-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: var(--dark);
        }

        .option-group select, .option-group input {
            width: 100%;
            padding: 12px 15px;
            border: 1px solid var(--light-gray);
            border-radius: var(--border-radius);
            background: white;
            font-size: 1rem;
            transition: var(--transition);
        }

        .option-group select:focus, .option-group input:focus {
            border-color: var(--primary);
            outline: none;
            box-shadow: 0 0 0 3px rgba(67, 97, 238, 0.2);
        }

        .compression-level {
            display: flex;
            flex-direction: column;
            gap: 10px;
            margin: 20px 0;
        }

        .level-option {
            display: flex;
            align-items: center;
            padding: 15px;
            border: 2px solid var(--light-gray);
            border-radius: var(--border-radius);
            cursor: pointer;
            transition: var(--transition);
        }

        .level-option:hover {
            border-color: var(--primary);
        }

        .level-option.selected {
            border-color: var(--primary);
            background: rgba(67, 97, 238, 0.05);
        }

        .level-radio {
            margin-right: 15px;
            width: 20px;
            height: 20px;
            border: 2px solid var(--gray);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .level-option.selected .level-radio {
            border-color: var(--primary);
        }

        .level-option.selected .level-radio::after {
            content: '';
            width: 10px;
            height: 10px;
            background: var(--primary);
            border-radius: 50%;
        }

        .level-details {
            flex: 1;
        }

        .level-details h4 {
            margin-bottom: 5px;
        }

        .level-details p {
            color: var(--gray);
            font-size: 0.9rem;
        }

        .progress-container {
            margin: 30px 0;
            display: none;
        }

        .progress-info {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
        }

        .progress-bar {
            height: 10px;
            background-color: var(--light-gray);
            border-radius: 5px;
            overflow: hidden;
        }

        .progress {
            height: 100%;
            background: linear-gradient(to right, var(--primary), var(--secondary));
            width: 0%;
            transition: width 0.4s ease;
        }

        .result-area {
            margin: 30px 0;
            display: none;
            text-align: center;
            padding: 30px;
            background: var(--light);
            border-radius: var(--border-radius);
        }

        .comparison {
            display: flex;
            justify-content: space-around;
            margin: 25px 0;
            flex-wrap: wrap;
            gap: 20px;
        }

        .file-comparison {
            text-align: center;
            flex: 1;
            min-width: 200px;
        }

        .file-comparison .file-icon {
            font-size: 3rem;
            margin-bottom: 15px;
        }

        .file-comparison h4 {
            margin-bottom: 10px;
        }

        .file-comparison .file-size {
            font-size: 1.5rem;
            font-weight: 700;
            margin-bottom: 5px;
        }

        .file-comparison .file-size.original {
            color: var(--danger);
        }

        .file-comparison .file-size.compressed {
            color: var(--success);
        }

        .savings {
            text-align: center;
            margin: 20px 0;
            padding: 20px;
            background: white;
            border-radius: var(--border-radius);
            box-shadow: var(--shadow);
        }

        .savings h3 {
            margin-bottom: 10px;
            color: var(--primary);
        }

        .savings .savings-amount {
            font-size: 2rem;
            font-weight: 800;
            color: var(--success);
            margin-bottom: 5px;
        }

        .savings .savings-percent {
            font-size: 1.2rem;
            color: var(--gray);
        }

        .download-btn {
            display: inline-flex;
            align-items: center;
            gap: 10px;
            margin: 20px auto;
        }

        .empty-state {
            text-align: center;
            padding: 30px;
            color: var(--gray);
        }

        .empty-state i {
            font-size: 3rem;
            margin-bottom: 15px;
            color: var(--light-gray);
        }

        @media (max-width: 768px) {
            .tool-section {
                padding: 30px 20px;
            }

            .options {
                grid-template-columns: 1fr;
            }

            .comparison {
                flex-direction: column;
            }
        }

        @media (max-width: 576px) {
            .tool-header h2 {
                font-size: 1.8rem;
            }

            .upload-area {
                padding: 30px 15px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <div class="header-content">
                <a href="#" class="logo">
                    <i class="fas fa-magic"></i>
                    <span>DocuMagic</span>
                </a>
            </div>
        </header>

        <!-- PDF Compression Tool Section -->
        <div class="tool-section active" id="pdf-compress-tool">
            <div class="tool-header">
                <h2>PDF Compression</h2>
                <p>Reduce your PDF file size significantly without losing quality</p>
            </div>
            
            <div class="upload-area" id="pdf-compress-upload">
                <i class="fas fa-cloud-upload-alt"></i>
                <h3>Upload Your PDF File</h3>
                <p>Drag & drop your file here or click to browse</p>
                <input type="file" id="pdf-compress-input" accept=".pdf" style="display: none;">
                <button class="btn" id="pdf-compress-browse">Select PDF File</button>
            </div>
            
            <div class="file-list" id="pdf-compress-file-list">
                <div class="empty-state" id="pdf-compress-empty">
                    <i class="fas fa-folder-open"></i>
                    <p>No PDF file selected yet</p>
                </div>
            </div>
            
            <div class="options">
                <div class="option-group">
                    <label>Compression Level</label>
                    <div class="compression-level">
                        <div class="level-option" data-level="low">
                            <div class="level-radio"></div>
                            <div class="level-details">
                                <h4>Low Compression</h4>
                                <p>Best quality, smaller size reduction</p>
                                <p class="estimated-saving">Estimated saving: 10-20%</p>
                            </div>
                        </div>
                        <div class="level-option selected" data-level="medium">
                            <div class="level-radio"></div>
                            <div class="level-details">
                                <h4>Medium Compression</h4>
                                <p>Good balance of quality and size</p>
                                <p class="estimated-saving">Estimated saving: 30-50%</p>
                            </div>
                        </div>
                        <div class="level-option" data-level="high">
                            <div class="level-radio"></div>
                            <div class="level-details">
                                <h4>High Compression</h4>
                                <p>Smaller file size, some quality loss</p>
                                <p class="estimated-saving">Estimated saving: 50-70%</p>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="option-group">
                    <label for="pdf-compress-optimize">Optimize For</label>
                    <select id="pdf-compress-optimize">
                        <option value="web">Web (Fast Loading)</option>
                        <option value="print" selected>Print (High Quality)</option>
                        <option value="email">Email (Smallest Size)</option>
                    </select>
                </div>
                
                <div class="option-group">
                    <label for="pdf-compress-downsample">Downsample Images</label>
                    <select id="pdf-compress-downsample">
                        <option value="yes" selected>Yes (Recommended)</option>
                        <option value="no">No (Keep Original Quality)</option>
                    </select>
                </div>
            </div>
            
            <div style="text-align: center;">
                <button class="btn btn-success" id="pdf-compress-convert" disabled>Compress PDF</button>
            </div>
            
            <div class="progress-container" id="pdf-compress-progress">
                <div class="progress-info">
                    <span>Processing...</span>
                    <span id="pdf-compress-progress-text">0%</span>
                </div>
                <div class="progress-bar">
                    <div class="progress" id="pdf-compress-progress-bar"></div>
                </div>
            </div>
            
            <div class="result-area" id="pdf-compress-result">
                <h3>Compression Complete!</h3>
                <p>Your PDF has been successfully compressed</p>
                
                <div class="comparison">
                    <div class="file-comparison">
                        <i class="fas fa-file-pdf file-icon" style="color: var(--danger);"></i>
                        <h4>Original PDF</h4>
                        <div class="file-size original" id="original-size">0 KB</div>
                        <p>Before compression</p>
                    </div>
                    
                    <div class="file-comparison">
                        <i class="fas fa-file-pdf file-icon" style="color: var(--success);"></i>
                        <h4>Compressed PDF</h4>
                        <div class="file-size compressed" id="compressed-size">0 KB</div>
                        <p>After compression</p>
                    </div>
                </div>
                
                <div class="savings">
                    <h3>Total Savings</h3>
                    <div class="savings-amount" id="savings-amount">0 KB</div>
                    <div class="savings-percent" id="savings-percent">0%</div>
                </div>
                
                <button class="btn download-btn" id="pdf-compress-download">
                    <i class="fas fa-download"></i> Download Compressed PDF
                </button>
            </div>
        </div>
    </div>

    <script>
        // DOM elements
        const pdfCompressUpload = document.getElementById('pdf-compress-upload');
        const pdfCompressInput = document.getElementById('pdf-compress-input');
        const pdfCompressBrowse = document.getElementById('pdf-compress-browse');
        const pdfCompressFileList = document.getElementById('pdf-compress-file-list');
        const pdfCompressEmpty = document.getElementById('pdf-compress-empty');
        const pdfCompressConvert = document.getElementById('pdf-compress-convert');
        const pdfCompressProgress = document.getElementById('pdf-compress-progress');
        const pdfCompressProgressBar = document.getElementById('pdf-compress-progress-bar');
        const pdfCompressProgressText = document.getElementById('pdf-compress-progress-text');
        const pdfCompressResult = document.getElementById('pdf-compress-result');
        const pdfCompressDownload = document.getElementById('pdf-compress-download');
        
        const originalSizeElement = document.getElementById('original-size');
        const compressedSizeElement = document.getElementById('compressed-size');
        const savingsAmountElement = document.getElementById('savings-amount');
        const savingsPercentElement = document.getElementById('savings-percent');

        // Compression level selection
        const levelOptions = document.querySelectorAll('.level-option');
        let selectedLevel = 'medium';
        
        levelOptions.forEach(option => {
            option.addEventListener('click', function() {
                levelOptions.forEach(opt => opt.classList.remove('selected'));
                this.classList.add('selected');
                selectedLevel = this.getAttribute('data-level');
            });
        });

        // Store selected file
        let selectedFile = null;

        // Browse button click
        pdfCompressBrowse.addEventListener('click', function() {
            pdfCompressInput.click();
        });

        // File input change
        pdfCompressInput.addEventListener('change', function(e) {
            if (e.target.files.length > 0) {
                handleFileSelection(e.target.files[0]);
            }
        });

        // Drag and drop functionality
        pdfCompressUpload.addEventListener('dragover', function(e) {
            e.preventDefault();
            this.classList.add('active');
        });

        pdfCompressUpload.addEventListener('dragleave', function(e) {
            e.preventDefault();
            this.classList.remove('active');
        });

        pdfCompressUpload.addEventListener('drop', function(e) {
            e.preventDefault();
            this.classList.remove('active');
            
            if (e.dataTransfer.files.length > 0) {
                handleFileSelection(e.dataTransfer.files[0]);
            }
        });

        // Handle file selection
        function handleFileSelection(file) {
            if (file.type !== 'application/pdf') {
                alert('Please select a PDF file.');
                return;
            }
            
            selectedFile = file;
            
            // Update UI
            updateFileList();
            updateConvertButton();
        }

        // Update file list display
        function updateFileList() {
            if (!selectedFile) {
                pdfCompressEmpty.style.display = 'block';
                pdfCompressFileList.innerHTML = '';
                pdfCompressFileList.appendChild(pdfCompressEmpty);
                return;
            }
            
            pdfCompressEmpty.style.display = 'none';
            
            // Clear existing list (except empty state)
            const fileListItems = pdfCompressFileList.querySelectorAll('.file-item');
            fileListItems.forEach(item => item.remove());
            
            // Add file to list
            const fileItem = document.createElement('div');
            fileItem.className = 'file-item';
            fileItem.innerHTML = `
                <div class="file-info">
                    <i class="fas fa-file-pdf file-icon"></i>
                    <div class="file-details">
                        <h4>${selectedFile.name}</h4>
                        <p>${formatFileSize(selectedFile.size)}</p>
                    </div>
                </div>
                <div class="file-actions">
                    <button class="remove-file"><i class="fas fa-times"></i></button>
                </div>
            `;
            
            pdfCompressFileList.appendChild(fileItem);
            
            // Remove file functionality
            fileItem.querySelector('.remove-file').addEventListener('click', function() {
                selectedFile = null;
                updateFileList();
                updateConvertButton();
            });
        }

        // Update convert button state
        function updateConvertButton() {
            pdfCompressConvert.disabled = !selectedFile;
        }

        // Format file size
        function formatFileSize(bytes) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        }

        // Convert button click
        pdfCompressConvert.addEventListener('click', function() {
            if (!selectedFile) {
                alert('Please select a PDF file first.');
                return;
            }
            
            // Show progress
            pdfCompressProgress.style.display = 'block';
            pdfCompressProgressBar.style.width = '0%';
            pdfCompressProgressText.textContent = '0%';
            
            // Start compression
            compressPDF();
        });

        // Compress PDF
        async function compressPDF() {
            try {
                // Get options
                const optimizeFor = document.getElementById('pdf-compress-optimize').value;
                const downsample = document.getElementById('pdf-compress-downsample').value;
                
                // Calculate compression ratio based on selected level
                let compressionRatio = 0.7; // Default for medium
                if (selectedLevel === 'low') compressionRatio = 0.9;
                if (selectedLevel === 'high') compressionRatio = 0.5;
                
                // Adjust based on optimization target
                if (optimizeFor === 'web') compressionRatio *= 0.9;
                if (optimizeFor === 'email') compressionRatio *= 0.7;
                
                // Simulate processing steps
                let progress = 0;
                const steps = [
                    "Loading PDF...",
                    "Analyzing content...",
                    "Optimizing images...",
                    "Compressing text...",
                    "Finalizing..."
                ];
                
                for (let i = 0; i < steps.length; i++) {
                    // Update progress
                    progress = (i / steps.length) * 100;
                    pdfCompressProgressBar.style.width = `${progress}%`;
                    pdfCompressProgressText.textContent = `${Math.round(progress)}%`;
                    
                    // Simulate processing time
                    await new Promise(resolve => setTimeout(resolve, 500));
                }
                
                // Complete progress
                pdfCompressProgressBar.style.width = '100%';
                pdfCompressProgressText.textContent = '100%';
                
                // Calculate compressed size
                const originalSize = selectedFile.size;
                const compressedSize = Math.round(originalSize * compressionRatio);
                
                // Generate a compressed PDF blob (simulated)
                // In a real implementation, you would use pdf-lib or similar to actually compress the PDF
                const compressedBlob = new Blob(
                    [await selectedFile.arrayBuffer()], 
                    { type: 'application/pdf' }
                );
                
                // In a real implementation, the blob would be smaller due to compression
                // For simulation purposes, we'll just use the original file but show the calculated sizes
                const compressedUrl = URL.createObjectURL(compressedBlob);
                
                // Show result with calculated sizes
                originalSizeElement.textContent = formatFileSize(originalSize);
                compressedSizeElement.textContent = formatFileSize(compressedSize);
                
                const savings = originalSize - compressedSize;
                const savingsPercent = ((savings / originalSize) * 100).toFixed(1);
                
                savingsAmountElement.textContent = formatFileSize(savings);
                savingsPercentElement.textContent = `${savingsPercent}%`;
                
                // Show result
                pdfCompressResult.style.display = 'block';
                
                // Set up download
                pdfCompressDownload.onclick = function() {
                    const link = document.createElement('a');
                    link.href = compressedUrl;
                    link.download = `compressed-${selectedFile.name}`;
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);
                };
                
            } catch (error) {
                console.error('Error compressing PDF:', error);
                alert('An error occurred during compression. Please try again.');
            }
        }

        // Note: This is a simulation of PDF compression.
        // In a real implementation, you would use a library like pdf-lib to actually compress the PDF.
        // The actual compression would involve:
        // 1. Removing unused objects
        // 2. Optimizing images (downsampling, compression)
        // 3. Removing redundant content
        // 4. Using more efficient encoding
    </script>
</body>
</html>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PDF Merge & Split Tools | DocuMagic</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf-lib/1.17.1/pdf-lib.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/2.0.5/FileSaver.min.js"></script>
    <style>
        :root {
            --primary: #4361ee;
            --primary-dark: #3a56d4;
            --secondary: #7209b7;
            --accent: #f72585;
            --light: #f8f9fa;
            --dark: #212529;
            --gray: #6c757d;
            --light-gray: #e9ecef;
            --success: #4cc9f0;
            --warning: #ff9e00;
            --danger: #e63946;
            --border-radius: 12px;
            --shadow: 0 10px 20px rgba(0,0,0,0.1);
            --transition: all 0.3s ease;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', system-ui, sans-serif;
        }

        body {
            background: linear-gradient(135deg, #f5f7fa 0%, #e4e8f0 100%);
            color: var(--dark);
            line-height: 1.6;
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            width: 100%;
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 20px;
        }

        header {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            box-shadow: var(--shadow);
            border-radius: var(--border-radius);
            position: sticky;
            top: 20px;
            z-index: 1000;
            margin-bottom: 30px;
        }

        .header-content {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px 25px;
        }

        .logo {
            display: flex;
            align-items: center;
            gap: 10px;
            font-size: 1.8rem;
            font-weight: 800;
            color: var(--primary);
            text-decoration: none;
        }

        .logo i {
            color: var(--secondary);
        }

        .tools-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
            gap: 25px;
            margin-bottom: 40px;
        }

        .tool-card {
            background: white;
            border-radius: var(--border-radius);
            box-shadow: var(--shadow);
            padding: 30px 25px;
            text-align: center;
            cursor: pointer;
            transition: var(--transition);
            position: relative;
            overflow: hidden;
            border: 1px solid rgba(0,0,0,0.05);
        }

        .tool-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 5px;
            background: linear-gradient(to right, var(--primary), var(--secondary));
        }

        .tool-card:hover {
            transform: translateY(-10px);
            box-shadow: 0 15px 30px rgba(0,0,0,0.15);
        }

        .tool-icon {
            width: 70px;
            height: 70px;
            margin: 0 auto 20px;
            background: linear-gradient(135deg, var(--primary), var(--secondary));
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 1.8rem;
        }

        .tool-card h3 {
            margin-bottom: 15px;
            color: var(--dark);
            font-size: 1.4rem;
        }

        .tool-card p {
            color: var(--gray);
            font-size: 0.95rem;
        }

        .tool-section {
            display: none;
            background: white;
            border-radius: var(--border-radius);
            box-shadow: var(--shadow);
            padding: 40px;
            margin-bottom: 50px;
            animation: fadeIn 0.5s ease;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .tool-section.active {
            display: block;
        }

        .tool-header {
            text-align: center;
            margin-bottom: 40px;
        }

        .tool-header h2 {
            color: var(--primary);
            margin-bottom: 10px;
            font-size: 2.2rem;
        }

        .tool-header p {
            color: var(--gray);
            max-width: 600px;
            margin: 0 auto;
        }

        .upload-area {
            border: 2px dashed var(--light-gray);
            border-radius: var(--border-radius);
            padding: 50px 20px;
            text-align: center;
            margin-bottom: 30px;
            transition: var(--transition);
            cursor: pointer;
            background: var(--light);
        }

        .upload-area:hover {
            border-color: var(--primary);
            background: rgba(67, 97, 238, 0.05);
        }

        .upload-area.active {
            border-color: var(--primary);
            background: rgba(67, 97, 238, 0.08);
        }

        .upload-area i {
            font-size: 3.5rem;
            color: var(--gray);
            margin-bottom: 20px;
        }

        .upload-area h3 {
            margin-bottom: 10px;
            color: var(--dark);
        }

        .upload-area p {
            color: var(--gray);
            margin-bottom: 20px;
        }

        .btn {
            display: inline-block;
            background: var(--primary);
            color: white;
            padding: 12px 28px;
            border: none;
            border-radius: 50px;
            cursor: pointer;
            font-weight: 600;
            font-size: 1rem;
            transition: var(--transition);
            text-decoration: none;
        }

        .btn:hover {
            background: var(--primary-dark);
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }

        .btn-secondary {
            background: var(--secondary);
        }

        .btn-secondary:hover {
            background: #6511a0;
        }

        .btn-success {
            background: var(--success);
        }

        .btn-success:hover {
            background: #3ab3d6;
        }

        .btn-warning {
            background: var(--warning);
        }

        .btn-warning:hover {
            background: #e68e00;
        }

        .btn-danger {
            background: var(--danger);
        }

        .btn-danger:hover {
            background: #d32f3a;
        }

        .btn:disabled {
            background: var(--light-gray);
            color: var(--gray);
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

        .file-list {
            margin: 25px 0;
        }

        .file-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px;
            border-radius: var(--border-radius);
            background: var(--light);
            margin-bottom: 10px;
            transition: var(--transition);
        }

        .file-item:hover {
            background: #e9ecef;
        }

        .file-info {
            display: flex;
            align-items: center;
            gap: 15px;
            flex: 1;
        }

        .file-icon {
            font-size: 1.5rem;
            color: var(--primary);
        }

        .file-details h4 {
            margin-bottom: 5px;
        }

        .file-details p {
            color: var(--gray);
            font-size: 0.9rem;
        }

        .file-actions {
            display: flex;
            gap: 10px;
        }

        .file-actions button {
            background: none;
            border: none;
            cursor: pointer;
            color: var(--accent);
            font-size: 1.2rem;
            transition: var(--transition);
        }

        .file-actions button:hover {
            color: #d3126b;
        }

        .file-actions .move-btn {
            color: var(--primary);
        }

        .file-actions .move-btn:hover {
            color: var(--primary-dark);
        }

        .options {
            margin: 30px 0;
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 20px;
        }

        .option-group {
            margin-bottom: 20px;
        }

        .option-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: var(--dark);
        }

        .option-group select, .option-group input {
            width: 100%;
            padding: 12px 15px;
            border: 1px solid var(--light-gray);
            border-radius: var(--border-radius);
            background: white;
            font-size: 1rem;
            transition: var(--transition);
        }

        .option-group select:focus, .option-group input:focus {
            border-color: var(--primary);
            outline: none;
            box-shadow: 0 0 0 3px rgba(67, 97, 238, 0.2);
        }

        .split-options {
            display: none;
        }

        .split-options.active {
            display: block;
        }

        .page-range-input {
            display: none;
            margin-top: 10px;
        }

        .page-range-input.active {
            display: block;
        }

        .progress-container {
            margin: 30px 0;
            display: none;
        }

        .progress-info {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
        }

        .progress-bar {
            height: 10px;
            background-color: var(--light-gray);
            border-radius: 5px;
            overflow: hidden;
        }

        .progress {
            height: 100%;
            background: linear-gradient(to right, var(--primary), var(--secondary));
            width: 0%;
            transition: width 0.4s ease;
        }

        .result-area {
            margin: 30px 0;
            display: none;
            text-align: center;
            padding: 30px;
            background: var(--light);
            border-radius: var(--border-radius);
        }

        .download-btn {
            display: inline-flex;
            align-items: center;
            gap: 10px;
            margin: 20px auto;
        }

        .empty-state {
            text-align: center;
            padding: 30px;
            color: var(--gray);
        }

        .empty-state i {
            font-size: 3rem;
            margin-bottom: 15px;
            color: var(--light-gray);
        }

        @media (max-width: 768px) {
            .tool-section {
                padding: 30px 20px;
            }

            .options {
                grid-template-columns: 1fr;
            }

            .file-actions {
                flex-direction: column;
            }
        }

        @media (max-width: 576px) {
            .tool-header h2 {
                font-size: 1.8rem;
            }

            .upload-area {
                padding: 30px 15px;
            }

            .tools-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <div class="header-content">
                <a href="#" class="logo">
                    <i class="fas fa-magic"></i>
                    <span>DocuMagic</span>
                </a>
            </div>
        </header>

        <!-- Tools Grid -->
        <div class="tools-grid">
            <div class="tool-card" data-tool="merge-pdf">
                <div class="tool-icon">
                    <i class="fas fa-object-group"></i>
                </div>
                <h3>Merge PDF</h3>
                <p>Combine multiple PDF files into a single document</p>
            </div>
            <div class="tool-card" data-tool="split-pdf">
                <div class="tool-icon">
                    <i class="fas fa-cut"></i>
                </div>
                <h3>Split PDF</h3>
                <p>Split PDF documents into separate files or extract pages</p>
            </div>
        </div>

        <!-- Tool Sections -->
        <div id="tool-sections">
            <!-- Merge PDF Tool -->
            <div class="tool-section" id="merge-pdf-tool">
                <div class="tool-header">
                    <h2>Merge PDF Files</h2>
                    <p>Combine multiple PDF files into a single document in your preferred order</p>
                </div>
                
                <div class="upload-area" id="merge-pdf-upload">
                    <i class="fas fa-cloud-upload-alt"></i>
                    <h3>Upload Your PDF Files</h3>
                    <p>Drag & drop your files here or click to browse (multiple files supported)</p>
                    <input type="file" id="merge-pdf-input" accept=".pdf" multiple style="display: none;">
                    <button class="btn" id="merge-pdf-browse">Select PDF Files</button>
                </div>
                
                <div class="file-list" id="merge-pdf-file-list">
                    <div class="empty-state" id="merge-pdf-empty">
                        <i class="fas fa-folder-open"></i>
                        <p>No PDF files selected yet</p>
                    </div>
                </div>
                
                <div class="options">
                    <div class="option-group">
                        <label for="merge-pdf-order">Page Order</label>
                        <select id="merge-pdf-order">
                            <option value="sequential" selected>Sequential (one after another)</option>
                            <option value="alternating">Alternating (page 1 from each, then page 2, etc.)</option>
                        </select>
                    </div>
                    <div class="option-group">
                        <label for="merge-pdf-bookmarks">Include Bookmarks</label>
                        <select id="merge-pdf-bookmarks">
                            <option value="yes" selected>Yes</option>
                            <option value="no">No</option>
                        </select>
                    </div>
                </div>
                
                <div style="text-align: center;">
                    <button class="btn btn-success" id="merge-pdf-convert" disabled>Merge PDF Files</button>
                </div>
                
                <div class="progress-container" id="merge-pdf-progress">
                    <div class="progress-info">
                        <span>Processing...</span>
                        <span id="merge-pdf-progress-text">0%</span>
                    </div>
                    <div class="progress-bar">
                        <div class="progress" id="merge-pdf-progress-bar"></div>
                    </div>
                </div>
                
                <div class="result-area" id="merge-pdf-result">
                    <h3>Merge Complete!</h3>
                    <p>Your PDF files have been successfully merged into a single document</p>
                    <button class="btn download-btn" id="merge-pdf-download">
                        <i class="fas fa-download"></i> Download Merged PDF
                    </button>
                </div>
            </div>

            <!-- Split PDF Tool -->
            <div class="tool-section" id="split-pdf-tool">
                <div class="tool-header">
                    <h2>Split PDF Files</h2>
                    <p>Split PDF documents into separate files or extract specific pages</p>
                </div>
                
                <div class="upload-area" id="split-pdf-upload">
                    <i class="fas fa-cloud-upload-alt"></i>
                    <h3>Upload Your PDF File</h3>
                    <p>Drag & drop your file here or click to browse</p>
                    <input type="file" id="split-pdf-input" accept=".pdf" style="display: none;">
                    <button class="btn" id="split-pdf-browse">Select PDF File</button>
                </div>
                
                <div class="file-list" id="split-pdf-file-list">
                    <div class="empty-state" id="split-pdf-empty">
                        <i class="fas fa-folder-open"></i>
                        <p>No PDF file selected yet</p>
                    </div>
                </div>
                
                <div class="options">
                    <div class="option-group">
                        <label for="split-pdf-method">Split Method</label>
                        <select id="split-pdf-method">
                            <option value="single" selected>Extract single pages</option>
                            <option value="range">Extract page range</option>
                            <option value="every">Split every page</option>
                            <option value="custom">Custom page selection</option>
                        </select>
                    </div>
                    
                    <div class="split-options" id="split-single-options">
                        <div class="option-group">
                            <label for="split-single-page">Page to Extract</label>
                            <input type="number" id="split-single-page" min="1" value="1">
                        </div>
                    </div>
                    
                    <div class="split-options" id="split-range-options">
                        <div class="option-group">
                            <label for="split-range-start">Start Page</label>
                            <input type="number" id="split-range-start" min="1" value="1">
                        </div>
                        <div class="option-group">
                            <label for="split-range-end">End Page</label>
                            <input type="number" id="split-range-end" min="1" value="1">
                        </div>
                    </div>
                    
                    <div class="split-options" id="split-custom-options">
                        <div class="option-group">
                            <label for="split-custom-pages">Pages to Extract (e.g., 1,3,5-8)</label>
                            <input type="text" id="split-custom-pages" placeholder="1,3,5-8">
                        </div>
                    </div>
                </div>
                
                <div style="text-align: center;">
                    <button class="btn btn-success" id="split-pdf-convert" disabled>Split PDF</button>
                </div>
                
                <div class="progress-container" id="split-pdf-progress">
                    <div class="progress-info">
                        <span>Processing...</span>
                        <span id="split-pdf-progress-text">0%</span>
                    </div>
                    <div class="progress-bar">
                        <div class="progress" id="split-pdf-progress-bar"></div>
                    </div>
                </div>
                
                <div class="result-area" id="split-pdf-result">
                    <h3>Split Complete!</h3>
                    <p id="split-result-message">Your PDF has been successfully split</p>
                    <button class="btn download-btn" id="split-pdf-download">
                        <i class="fas fa-download"></i> Download Split Files
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Tool selection functionality
        document.querySelectorAll('.tool-card').forEach(card => {
            card.addEventListener('click', function() {
                const toolId = this.getAttribute('data-tool');
                
                // Hide all tool sections
                document.querySelectorAll('.tool-section').forEach(section => {
                    section.classList.remove('active');
                });
                
                // Show selected tool section
                document.getElementById(`${toolId}-tool`).classList.add('active');
                
                // Scroll to the tool section
                document.getElementById(`${toolId}-tool`).scrollIntoView({ behavior: 'smooth' });
            });
        });

        // ========== MERGE PDF TOOL ==========
        const mergePdfUpload = document.getElementById('merge-pdf-upload');
        const mergePdfInput = document.getElementById('merge-pdf-input');
        const mergePdfBrowse = document.getElementById('merge-pdf-browse');
        const mergePdfFileList = document.getElementById('merge-pdf-file-list');
        const mergePdfEmpty = document.getElementById('merge-pdf-empty');
        const mergePdfConvert = document.getElementById('merge-pdf-convert');
        const mergePdfProgress = document.getElementById('merge-pdf-progress');
        const mergePdfProgressBar = document.getElementById('merge-pdf-progress-bar');
        const mergePdfProgressText = document.getElementById('merge-pdf-progress-text');
        const mergePdfResult = document.getElementById('merge-pdf-result');
        const mergePdfDownload = document.getElementById('merge-pdf-download');

        // Store selected files for merging
        let mergeFiles = [];

        // Browse button click
        mergePdfBrowse.addEventListener('click', function() {
            mergePdfInput.click();
        });

        // File input change
        mergePdfInput.addEventListener('change', function(e) {
            if (e.target.files.length > 0) {
                handleMergeFileSelection(Array.from(e.target.files));
            }
        });

        // Drag and drop functionality
        mergePdfUpload.addEventListener('dragover', function(e) {
            e.preventDefault();
            this.classList.add('active');
        });

        mergePdfUpload.addEventListener('dragleave', function(e) {
            e.preventDefault();
            this.classList.remove('active');
        });

        mergePdfUpload.addEventListener('drop', function(e) {
            e.preventDefault();
            this.classList.remove('active');
            
            if (e.dataTransfer.files.length > 0) {
                handleMergeFileSelection(Array.from(e.dataTransfer.files));
            }
        });

        // Handle file selection for merging
        function handleMergeFileSelection(files) {
            // Filter only PDF files
            const pdfFiles = files.filter(file => file.type === 'application/pdf');
            
            if (pdfFiles.length === 0) {
                alert('Please select valid PDF files.');
                return;
            }
            
            // Add files to our array
            mergeFiles = [...mergeFiles, ...pdfFiles];
            
            // Update UI
            updateMergeFileList();
            updateMergeConvertButton();
        }

        // Update file list display for merging
        function updateMergeFileList() {
            if (mergeFiles.length === 0) {
                mergePdfEmpty.style.display = 'block';
                mergePdfFileList.innerHTML = '';
                mergePdfFileList.appendChild(mergePdfEmpty);
                return;
            }
            
            mergePdfEmpty.style.display = 'none';
            
            // Clear existing list (except empty state)
            const fileListItems = mergePdfFileList.querySelectorAll('.file-item');
            fileListItems.forEach(item => item.remove());
            
            // Add files to list
            mergeFiles.forEach((file, index) => {
                const fileItem = document.createElement('div');
                fileItem.className = 'file-item';
                fileItem.innerHTML = `
                    <div class="file-info">
                        <i class="fas fa-file-pdf file-icon"></i>
                        <div class="file-details">
                            <h4>${file.name}</h4>
                            <p>${formatFileSize(file.size)} • Position ${index + 1}</p>
                        </div>
                    </div>
                    <div class="file-actions">
                        <button class="move-btn up-btn" ${index === 0 ? 'disabled' : ''}>
                            <i class="fas fa-arrow-up"></i>
                        </button>
                        <button class="move-btn down-btn" ${index === mergeFiles.length - 1 ? 'disabled' : ''}>
                            <i class="fas fa-arrow-down"></i>
                        </button>
                        <button class="remove-file" data-index="${index}">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                `;
                
                mergePdfFileList.appendChild(fileItem);
            });
            
            // Add event listeners to remove buttons
            document.querySelectorAll('.remove-file').forEach(button => {
                button.addEventListener('click', function() {
                    const index = parseInt(this.getAttribute('data-index'));
                    removeMergeFile(index);
                });
            });
            
            // Add event listeners to move buttons
            document.querySelectorAll('.up-btn').forEach(button => {
                if (!button.disabled) {
                    button.addEventListener('click', function() {
                        const fileItem = this.closest('.file-item');
                        const index = Array.from(mergePdfFileList.children).indexOf(fileItem);
                        moveMergeFileUp(index);
                    });
                }
            });
            
            document.querySelectorAll('.down-btn').forEach(button => {
                if (!button.disabled) {
                    button.addEventListener('click', function() {
                        const fileItem = this.closest('.file-item');
                        const index = Array.from(mergePdfFileList.children).indexOf(fileItem);
                        moveMergeFileDown(index);
                    });
                }
            });
        }

        // Remove a file from merge list
        function removeMergeFile(index) {
            mergeFiles.splice(index, 1);
            updateMergeFileList();
            updateMergeConvertButton();
        }

        // Move file up in the order
        function moveMergeFileUp(index) {
            if (index > 0) {
                [mergeFiles[index], mergeFiles[index - 1]] = [mergeFiles[index - 1], mergeFiles[index]];
                updateMergeFileList();
            }
        }

        // Move file down in the order
        function moveMergeFileDown(index) {
            if (index < mergeFiles.length - 1) {
                [mergeFiles[index], mergeFiles[index + 1]] = [mergeFiles[index + 1], mergeFiles[index]];
                updateMergeFileList();
            }
        }

        // Update merge button state
        function updateMergeConvertButton() {
            mergePdfConvert.disabled = mergeFiles.length < 2;
        }

        // Format file size
        function formatFileSize(bytes) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        }

        // Merge button click
        mergePdfConvert.addEventListener('click', function() {
            if (mergeFiles.length < 2) {
                alert('Please select at least two PDF files to merge.');
                return;
            }
            
            // Show progress
            mergePdfProgress.style.display = 'block';
            mergePdfProgressBar.style.width = '0%';
            mergePdfProgressText.textContent = '0%';
            
            // Start merging
            mergePDFs();
        });

        // Merge PDFs
        async function mergePDFs() {
            try {
                // Get options
                const order = document.getElementById('merge-pdf-order').value;
                const includeBookmarks = document.getElementById('merge-pdf-bookmarks').value === 'yes';
                
                // Initialize merged PDF
                const { PDFDocument } = PDFLib;
                const mergedPdf = await PDFDocument.create();
                
                let progress = 0;
                const progressIncrement = 100 / mergeFiles.length;
                
                // Process each PDF
                for (let i = 0; i < mergeFiles.length; i++) {
                    const file = mergeFiles[i];
                    
                    // Update progress
                    progress += progressIncrement;
                    mergePdfProgressBar.style.width = `${Math.min(progress, 100)}%`;
                    mergePdfProgressText.textContent = `${Math.round(Math.min(progress, 100))}%`;
                    
                    // Load the PDF
                    const arrayBuffer = await file.arrayBuffer();
                    const pdf = await PDFDocument.load(arrayBuffer);
                    
                    // Copy pages to merged PDF
                    const pages = await mergedPdf.copyPages(pdf, pdf.getPageIndices());
                    pages.forEach(page => {
                        mergedPdf.addPage(page);
                    });
                    
                    // Simulate processing time
                    await new Promise(resolve => setTimeout(resolve, 300));
                }
                
                // Complete progress
                mergePdfProgressBar.style.width = '100%';
                mergePdfProgressText.textContent = '100%';
                
                // Generate merged PDF
                const mergedPdfBytes = await mergedPdf.save();
                const mergedPdfBlob = new Blob([mergedPdfBytes], { type: 'application/pdf' });
                const mergedPdfUrl = URL.createObjectURL(mergedPdfBlob);
                
                // Show result
                mergePdfResult.style.display = 'block';
                
                // Set up download
                mergePdfDownload.onclick = function() {
                    const link = document.createElement('a');
                    link.href = mergedPdfUrl;
                    link.download = 'merged-document.pdf';
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);
                };
                
            } catch (error) {
                console.error('Error merging PDFs:', error);
                alert('An error occurred during merging. Please try again.');
            }
        }

        // ========== SPLIT PDF TOOL ==========
        const splitPdfUpload = document.getElementById('split-pdf-upload');
        const splitPdfInput = document.getElementById('split-pdf-input');
        const splitPdfBrowse = document.getElementById('split-pdf-browse');
        const splitPdfFileList = document.getElementById('split-pdf-file-list');
        const splitPdfEmpty = document.getElementById('split-pdf-empty');
        const splitPdfConvert = document.getElementById('split-pdf-convert');
        const splitPdfProgress = document.getElementById('split-pdf-progress');
        const splitPdfProgressBar = document.getElementById('split-pdf-progress-bar');
        const splitPdfProgressText = document.getElementById('split-pdf-progress-text');
        const splitPdfResult = document.getElementById('split-pdf-result');
        const splitPdfDownload = document.getElementById('split-pdf-download');
        const splitResultMessage = document.getElementById('split-result-message');

        // Store selected file for splitting
        let splitFile = null;
        let totalPages = 0;

        // Split method selection
        const splitMethod = document.getElementById('split-pdf-method');
        const splitOptions = document.querySelectorAll('.split-options');

        splitMethod.addEventListener('change', function() {
            // Hide all options
            splitOptions.forEach(option => option.classList.remove('active'));
            
            // Show selected option
            const selectedMethod = this.value;
            document.getElementById(`split-${selectedMethod}-options`).classList.add('active');
            
            // Update end page if needed
            if (selectedMethod === 'range' && totalPages > 0) {
                document.getElementById('split-range-end').value = totalPages;
                document.getElementById('split-range-end').max = totalPages;
            }
        });

        // Browse button click
        splitPdfBrowse.addEventListener('click', function() {
            splitPdfInput.click();
        });

        // File input change
        splitPdfInput.addEventListener('change', function(e) {
            if (e.target.files.length > 0) {
                handleSplitFileSelection(e.target.files[0]);
            }
        });

        // Drag and drop functionality
        splitPdfUpload.addEventListener('dragover', function(e) {
            e.preventDefault();
            this.classList.add('active');
        });

        splitPdfUpload.addEventListener('dragleave', function(e) {
            e.preventDefault();
            this.classList.remove('active');
        });

        splitPdfUpload.addEventListener('drop', function(e) {
            e.preventDefault();
            this.classList.remove('active');
            
            if (e.dataTransfer.files.length > 0) {
                handleSplitFileSelection(e.dataTransfer.files[0]);
            }
        });

        // Handle file selection for splitting
        async function handleSplitFileSelection(file) {
            if (file.type !== 'application/pdf') {
                alert('Please select a PDF file.');
                return;
            }
            
            splitFile = file;
            
            // Try to get page count
            try {
                const { PDFDocument } = PDFLib;
                const arrayBuffer = await file.arrayBuffer();
                const pdf = await PDFDocument.load(arrayBuffer);
                totalPages = pdf.getPageCount();
                
                // Update UI with page count
                updateSplitFileList();
                updateSplitConvertButton();
                
                // Update range inputs
                document.getElementById('split-range-end').value = totalPages;
                document.getElementById('split-range-end').max = totalPages;
                document.getElementById('split-single-page').max = totalPages;
            } catch (error) {
                console.error('Error loading PDF:', error);
                alert('Error loading PDF file. Please try another file.');
                splitFile = null;
                updateSplitFileList();
                updateSplitConvertButton();
            }
        }

        // Update file list display for splitting
        function updateSplitFileList() {
            if (!splitFile) {
                splitPdfEmpty.style.display = 'block';
                splitPdfFileList.innerHTML = '';
                splitPdfFileList.appendChild(splitPdfEmpty);
                return;
            }
            
            splitPdfEmpty.style.display = 'none';
            
            // Clear existing list (except empty state)
            const fileListItems = splitPdfFileList.querySelectorAll('.file-item');
            fileListItems.forEach(item => item.remove());
            
            // Add file to list
            const fileItem = document.createElement('div');
            fileItem.className = 'file-item';
            fileItem.innerHTML = `
                <div class="file-info">
                    <i class="fas fa-file-pdf file-icon"></i>
                    <div class="file-details">
                        <h4>${splitFile.name}</h4>
                        <p>${formatFileSize(splitFile.size)} • ${totalPages} page(s)</p>
                    </div>
                </div>
                <div class="file-actions">
                    <button class="remove-file"><i class="fas fa-times"></i></button>
                </div>
            `;
            
            splitPdfFileList.appendChild(fileItem);
            
            // Remove file functionality
            fileItem.querySelector('.remove-file').addEventListener('click', function() {
                splitFile = null;
                totalPages = 0;
                updateSplitFileList();
                updateSplitConvertButton();
            });
        }

        // Update split button state
        function updateSplitConvertButton() {
            splitPdfConvert.disabled = !splitFile;
        }

        // Split button click
        splitPdfConvert.addEventListener('click', function() {
            if (!splitFile) {
                alert('Please select a PDF file first.');
                return;
            }
            
            // Validate inputs based on method
            const method = splitMethod.value;
            let isValid = true;
            
            if (method === 'single') {
                const page = parseInt(document.getElementById('split-single-page').value);
                if (page < 1 || page > totalPages) {
                    alert(`Please enter a valid page number between 1 and ${totalPages}`);
                    isValid = false;
                }
            } else if (method === 'range') {
                const start = parseInt(document.getElementById('split-range-start').value);
                const end = parseInt(document.getElementById('split-range-end').value);
                if (start < 1 || end > totalPages || start > end) {
                    alert(`Please enter a valid page range between 1 and ${totalPages}`);
                    isValid = false;
                }
            } else if (method === 'custom') {
                const pagesInput = document.getElementById('split-custom-pages').value;
                if (!pagesInput.trim()) {
                    alert('Please enter pages to extract (e.g., 1,3,5-8)');
                    isValid = false;
                }
            }
            
            if (!isValid) return;
            
            // Show progress
            splitPdfProgress.style.display = 'block';
            splitPdfProgressBar.style.width = '0%';
            splitPdfProgressText.textContent = '0%';
            
            // Start splitting
            splitPDF();
        });

        // Split PDF
        async function splitPDF() {
            try {
                const { PDFDocument } = PDFLib;
                
                // Load the source PDF
                const arrayBuffer = await splitFile.arrayBuffer();
                const sourcePdf = await PDFDocument.load(arrayBuffer);
                
                // Get the split method and parameters
                const method = splitMethod.value;
                let pagesToExtract = [];
                
                // Determine which pages to extract
                if (method === 'every') {
                    // Extract every page
                    pagesToExtract = Array.from({length: totalPages}, (_, i) => i);
                } else if (method === 'single') {
                    // Extract single page
                    const page = parseInt(document.getElementById('split-single-page').value) - 1;
                    pagesToExtract = [page];
                } else if (method === 'range') {
                    // Extract page range
                    const start = parseInt(document.getElementById('split-range-start').value) - 1;
                    const end = parseInt(document.getElementById('split-range-end').value) - 1;
                    pagesToExtract = Array.from({length: end - start + 1}, (_, i) => start + i);
                } else if (method === 'custom') {
                    // Extract custom pages
                    const pagesInput = document.getElementById('split-custom-pages').value;
                    pagesToExtract = parsePageRange(pagesInput, totalPages);
                }
                
                // Create a ZIP file for multiple outputs
                const zip = new JSZip();
                let progress = 0;
                const progressIncrement = 100 / pagesToExtract.length;
                
                // Process each page to extract
                for (let i = 0; i < pagesToExtract.length; i++) {
                    const pageIndex = pagesToExtract[i];
                    
                    // Update progress
                    progress += progressIncrement;
                    splitPdfProgressBar.style.width = `${Math.min(progress, 100)}%`;
                    splitPdfProgressText.textContent = `${Math.round(Math.min(progress, 100))}%`;
                    
                    // Create a new PDF with just this page
                    const newPdf = await PDFDocument.create();
                    const [copiedPage] = await newPdf.copyPages(sourcePdf, [pageIndex]);
                    newPdf.addPage(copiedPage);
                    
                    // Save the PDF
                    const pdfBytes = await newPdf.save();
                    
                    // Add to ZIP
                    const pageNumber = pageIndex + 1;
                    zip.file(`page-${pageNumber}.pdf`, pdfBytes);
                    
                    // Simulate processing time
                    await new Promise(resolve => setTimeout(resolve, 200));
                }
                
                // Complete progress
                splitPdfProgressBar.style.width = '100%';
                splitPdfProgressText.textContent = '100%';
                
                // Generate ZIP file
                const zipBlob = await zip.generateAsync({type: 'blob'});
                const zipUrl = URL.createObjectURL(zipBlob);
                
                // Show result
                splitPdfResult.style.display = 'block';
                splitResultMessage.textContent = `Your PDF has been split into ${pagesToExtract.length} file(s)`;
                
                // Set up download
                splitPdfDownload.onclick = function() {
                    if (pagesToExtract.length === 1) {
                        // For single page, download directly as PDF
                        const pageIndex = pagesToExtract[0];
                        const pageNumber = pageIndex + 1;
                        
                        // Create a new PDF with just this page
                        PDFDocument.create().then(newPdf => {
                            return sourcePdf.copyPages([pageIndex]).then(([copiedPage]) => {
                                newPdf.addPage(copiedPage);
                                return newPdf.save();
                            });
                        }).then(pdfBytes => {
                            const blob = new Blob([pdfBytes], { type: 'application/pdf' });
                            saveAs(blob, `page-${pageNumber}.pdf`);
                        });
                    } else {
                        // For multiple pages, download as ZIP
                        saveAs(zipBlob, 'split-pages.zip');
                    }
                };
                
            } catch (error) {
                console.error('Error splitting PDF:', error);
                alert('An error occurred during splitting. Please try again.');
            }
        }

        // Parse page range input (e.g., "1,3,5-8")
        function parsePageRange(input, maxPages) {
            const pages = new Set();
            const parts = input.split(',');
            
            for (const part of parts) {
                if (part.includes('-')) {
                    // Handle range (e.g., "5-8")
                    const [start, end] = part.split('-').map(num => parseInt(num.trim()));
                    if (!isNaN(start) && !isNaN(end) && start >= 1 && end <= maxPages && start <= end) {
                        for (let i = start; i <= end; i++) {
                            pages.add(i - 1); // Convert to 0-based index
                        }
                    }
                } else {
                    // Handle single page (e.g., "3")
                    const page = parseInt(part.trim());
                    if (!isNaN(page) && page >= 1 && page <= maxPages) {
                        pages.add(page - 1); // Convert to 0-based index
                    }
                }
            }
            
            return Array.from(pages).sort((a, b) => a - b);
        }
    </script>
</body>
</html>  ,<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Excel to PDF & Edit PDF Tools | DocuMagic</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf-lib/1.17.1/pdf-lib.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <style>
        :root {
            --primary: #4361ee;
            --primary-dark: #3a56d4;
            --secondary: #7209b7;
            --accent: #f72585;
            --light: #f8f9fa;
            --dark: #212529;
            --gray: #6c757d;
            --light-gray: #e9ecef;
            --success: #4cc9f0;
            --warning: #ff9e00;
            --danger: #e63946;
            --border-radius: 12px;
            --shadow: 0 10px 20px rgba(0,0,0,0.1);
            --transition: all 0.3s ease;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', system-ui, sans-serif;
        }

        body {
            background: linear-gradient(135deg, #f5f7fa 0%, #e4e8f0 100%);
            color: var(--dark);
            line-height: 1.6;
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            width: 100%;
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 20px;
        }

        header {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            box-shadow: var(--shadow);
            border-radius: var(--border-radius);
            position: sticky;
            top: 20px;
            z-index: 1000;
            margin-bottom: 30px;
        }

        .header-content {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px 25px;
        }

        .logo {
            display: flex;
            align-items: center;
            gap: 10px;
            font-size: 1.8rem;
            font-weight: 800;
            color: var(--primary);
            text-decoration: none;
        }

        .logo i {
            color: var(--secondary);
        }

        .tools-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
            gap: 25px;
            margin-bottom: 40px;
        }

        .tool-card {
            background: white;
            border-radius: var(--border-radius);
            box-shadow: var(--shadow);
            padding: 30px 25px;
            text-align: center;
            cursor: pointer;
            transition: var(--transition);
            position: relative;
            overflow: hidden;
            border: 1px solid rgba(0,0,0,0.05);
        }

        .tool-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 5px;
            background: linear-gradient(to right, var(--primary), var(--secondary));
        }

        .tool-card:hover {
            transform: translateY(-10px);
            box-shadow: 0 15px 30px rgba(0,0,0,0.15);
        }

        .tool-icon {
            width: 70px;
            height: 70px;
            margin: 0 auto 20px;
            background: linear-gradient(135deg, var(--primary), var(--secondary));
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 1.8rem;
        }

        .tool-card h3 {
            margin-bottom: 15px;
            color: var(--dark);
            font-size: 1.4rem;
        }

        .tool-card p {
            color: var(--gray);
            font-size: 0.95rem;
        }

        .tool-section {
            display: none;
            background: white;
            border-radius: var(--border-radius);
            box-shadow: var(--shadow);
            padding: 40px;
            margin-bottom: 50px;
            animation: fadeIn 0.5s ease;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .tool-section.active {
            display: block;
        }

        .tool-header {
            text-align: center;
            margin-bottom: 40px;
        }

        .tool-header h2 {
            color: var(--primary);
            margin-bottom: 10px;
            font-size: 2.2rem;
        }

        .tool-header p {
            color: var(--gray);
            max-width: 600px;
            margin: 0 auto;
        }

        .upload-area {
            border: 2px dashed var(--light-gray);
            border-radius: var(--border-radius);
            padding: 50px 20px;
            text-align: center;
            margin-bottom: 30px;
            transition: var(--transition);
            cursor: pointer;
            background: var(--light);
        }

        .upload-area:hover {
            border-color: var(--primary);
            background: rgba(67, 97, 238, 0.05);
        }

        .upload-area.active {
            border-color: var(--primary);
            background: rgba(67, 97, 238, 0.08);
        }

        .upload-area i {
            font-size: 3.5rem;
            color: var(--gray);
            margin-bottom: 20px;
        }

        .upload-area h3 {
            margin-bottom: 10px;
            color: var(--dark);
        }

        .upload-area p {
            color: var(--gray);
            margin-bottom: 20px;
        }

        .btn {
            display: inline-block;
            background: var(--primary);
            color: white;
            padding: 12px 28px;
            border: none;
            border-radius: 50px;
            cursor: pointer;
            font-weight: 600;
            font-size: 1rem;
            transition: var(--transition);
            text-decoration: none;
        }

        .btn:hover {
            background: var(--primary-dark);
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }

        .btn-secondary {
            background: var(--secondary);
        }

        .btn-secondary:hover {
            background: #6511a0;
        }

        .btn-success {
            background: var(--success);
        }

        .btn-success:hover {
            background: #3ab3d6;
        }

        .btn-warning {
            background: var(--warning);
        }

        .btn-warning:hover {
            background: #e68e00;
        }

        .btn-danger {
            background: var(--danger);
        }

        .btn-danger:hover {
            background: #d32f3a;
        }

        .btn:disabled {
            background: var(--light-gray);
            color: var(--gray);
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

        .file-list {
            margin: 25px 0;
        }

        .file-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px;
            border-radius: var(--border-radius);
            background: var(--light);
            margin-bottom: 10px;
            transition: var(--transition);
        }

        .file-item:hover {
            background: #e9ecef;
        }

        .file-info {
            display: flex;
            align-items: center;
            gap: 15px;
            flex: 1;
        }

        .file-icon {
            font-size: 1.5rem;
            color: var(--primary);
        }

        .file-details h4 {
            margin-bottom: 5px;
        }

        .file-details p {
            color: var(--gray);
            font-size: 0.9rem;
        }

        .file-actions button {
            background: none;
            border: none;
            cursor: pointer;
            color: var(--accent);
            font-size: 1.2rem;
            transition: var(--transition);
        }

        .file-actions button:hover {
            color: #d3126b;
        }

        .options {
            margin: 30px 0;
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 20px;
        }

        .option-group {
            margin-bottom: 20px;
        }

        .option-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: var(--dark);
        }

        .option-group select, .option-group input, .option-group textarea {
            width: 100%;
            padding: 12px 15px;
            border: 1px solid var(--light-gray);
            border-radius: var(--border-radius);
            background: white;
            font-size: 1rem;
            transition: var(--transition);
        }

        .option-group select:focus, .option-group input:focus, .option-group textarea:focus {
            border-color: var(--primary);
            outline: none;
            box-shadow: 0 0 0 3px rgba(67, 97, 238, 0.2);
        }

        .progress-container {
            margin: 30px 0;
            display: none;
        }

        .progress-info {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
        }

        .progress-bar {
            height: 10px;
            background-color: var(--light-gray);
            border-radius: 5px;
            overflow: hidden;
        }

        .progress {
            height: 100%;
            background: linear-gradient(to right, var(--primary), var(--secondary));
            width: 0%;
            transition: width 0.4s ease;
        }

        .result-area {
            margin: 30px 0;
            display: none;
            text-align: center;
            padding: 30px;
            background: var(--light);
            border-radius: var(--border-radius);
        }

        .download-btn {
            display: inline-flex;
            align-items: center;
            gap: 10px;
            margin: 20px auto;
        }

        .empty-state {
            text-align: center;
            padding: 30px;
            color: var(--gray);
        }

        .empty-state i {
            font-size: 3rem;
            margin-bottom: 15px;
            color: var(--light-gray);
        }

        /* Edit PDF specific styles */
        .edit-tools {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
            flex-wrap: wrap;
        }

        .edit-tool-btn {
            padding: 10px 15px;
            background: var(--light);
            border: 1px solid var(--light-gray);
            border-radius: var(--border-radius);
            cursor: pointer;
            transition: var(--transition);
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .edit-tool-btn:hover {
            background: var(--light-gray);
        }

        .edit-tool-btn.active {
            background: var(--primary);
            color: white;
            border-color: var(--primary);
        }

        .edit-options {
            display: none;
            margin: 20px 0;
            padding: 20px;
            background: var(--light);
            border-radius: var(--border-radius);
        }

        .edit-options.active {
            display: block;
        }

        .color-picker {
            display: flex;
            gap: 10px;
            margin-bottom: 15px;
        }

        .color-option {
            width: 30px;
            height: 30px;
            border-radius: 50%;
            cursor: pointer;
            border: 2px solid transparent;
        }

        .color-option.active {
            border-color: var(--dark);
        }

        .pdf-preview-container {
            margin: 20px 0;
            border: 1px solid var(--light-gray);
            border-radius: var(--border-radius);
            overflow: hidden;
            height: 500px;
            position: relative;
        }

        .pdf-preview {
            width: 100%;
            height: 100%;
            border: none;
        }

        .preview-overlay {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
        }

        .annotation {
            position: absolute;
            pointer-events: auto;
        }

        .text-annotation {
            background: rgba(255, 255, 255, 0.8);
            padding: 5px;
            border-radius: 4px;
            border: 1px solid #ccc;
        }

        .image-annotation {
            max-width: 200px;
            max-height: 200px;
        }

        @media (max-width: 768px) {
            .tool-section {
                padding: 30px 20px;
            }

            .options {
                grid-template-columns: 1fr;
            }

            .edit-tools {
                flex-direction: column;
            }

            .pdf-preview-container {
                height: 400px;
            }
        }

        @media (max-width: 576px) {
            .tool-header h2 {
                font-size: 1.8rem;
            }

            .upload-area {
                padding: 30px 15px;
            }

            .tools-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <div class="header-content">
                <a href="#" class="logo">
                    <i class="fas fa-magic"></i>
                    <span>DocuMagic</span>
                </a>
            </div>
        </header>

        <!-- Tools Grid -->
        <div class="tools-grid">
            <div class="tool-card" data-tool="excel-to-pdf">
                <div class="tool-icon">
                    <i class="fas fa-file-excel"></i>
                </div>
                <h3>Excel to PDF</h3>
                <p>Convert Excel files to PDF format</p>
            </div>
            <div class="tool-card" data-tool="edit-pdf">
                <div class="tool-icon">
                    <i class="fas fa-edit"></i>
                </div>
                <h3>Edit PDF</h3>
                <p>Add text, images, and annotations to PDFs</p>
            </div>
        </div>

        <!-- Tool Sections -->
        <div id="tool-sections">
            <!-- Excel to PDF Tool -->
            <div class="tool-section" id="excel-to-pdf-tool">
                <div class="tool-header">
                    <h2>Excel to PDF Converter</h2>
                    <p>Convert your Excel files to PDF format for easy sharing and printing</p>
                </div>
                
                <div class="upload-area" id="excel-to-pdf-upload">
                    <i class="fas fa-cloud-upload-alt"></i>
                    <h3>Upload Your Excel File</h3>
                    <p>Drag & drop your file here or click to browse</p>
                    <input type="file" id="excel-to-pdf-input" accept=".xlsx,.xls,.csv" style="display: none;">
                    <button class="btn" id="excel-to-pdf-browse">Select Excel File</button>
                </div>
                
                <div class="file-list" id="excel-to-pdf-file-list">
                    <div class="empty-state" id="excel-to-pdf-empty">
                        <i class="fas fa-folder-open"></i>
                        <p>No Excel file selected yet</p>
                    </div>
                </div>
                
                <div class="options">
                    <div class="option-group">
                        <label for="excel-to-pdf-orientation">Page Orientation</label>
                        <select id="excel-to-pdf-orientation">
                            <option value="portrait">Portrait</option>
                            <option value="landscape" selected>Landscape</option>
                        </select>
                    </div>
                    <div class="option-group">
                        <label for="excel-to-pdf-size">Page Size</label>
                        <select id="excel-to-pdf-size">
                            <option value="a4">A4</option>
                            <option value="letter" selected>Letter</option>
                            <option value="legal">Legal</option>
                        </select>
                    </div>
                    <div class="option-group">
                        <label for="excel-to-pdf-scaling">Scaling</label>
                        <select id="excel-to-pdf-scaling">
                            <option value="fit">Fit to Page</option>
                            <option value="actual" selected>Actual Size</option>
                        </select>
                    </div>
                </div>
                
                <div style="text-align: center;">
                    <button class="btn btn-success" id="excel-to-pdf-convert" disabled>Convert to PDF</button>
                </div>
                
                <div class="progress-container" id="excel-to-pdf-progress">
                    <div class="progress-info">
                        <span>Processing...</span>
                        <span id="excel-to-pdf-progress-text">0%</span>
                    </div>
                    <div class="progress-bar">
                        <div class="progress" id="excel-to-pdf-progress-bar"></div>
                    </div>
                </div>
                
                <div class="result-area" id="excel-to-pdf-result">
                    <h3>Conversion Complete!</h3>
                    <p>Your Excel file has been successfully converted to PDF</p>
                    <button class="btn download-btn" id="excel-to-pdf-download">
                        <i class="fas fa-download"></i> Download PDF
                    </button>
                </div>
            </div>

            <!-- Edit PDF Tool -->
            <div class="tool-section" id="edit-pdf-tool">
                <div class="tool-header">
                    <h2>Edit PDF</h2>
                    <p>Add text, images, and annotations to your PDF documents</p>
                </div>
                
                <div class="upload-area" id="edit-pdf-upload">
                    <i class="fas fa-cloud-upload-alt"></i>
                    <h3>Upload Your PDF File</h3>
                    <p>Drag & drop your file here or click to browse</p>
                    <input type="file" id="edit-pdf-input" accept=".pdf" style="display: none;">
                    <button class="btn" id="edit-pdf-browse">Select PDF File</button>
                </div>
                
                <div class="file-list" id="edit-pdf-file-list">
                    <div class="empty-state" id="edit-pdf-empty">
                        <i class="fas fa-folder-open"></i>
                        <p>No PDF file selected yet</p>
                    </div>
                </div>

                <div class="edit-tools">
                    <button class="edit-tool-btn" data-tool="text">
                        <i class="fas fa-font"></i> Add Text
                    </button>
                    <button class="edit-tool-btn" data-tool="image">
                        <i class="fas fa-image"></i> Add Image
                    </button>
                    <button class="edit-tool-btn" data-tool="highlight">
                        <i class="fas fa-highlighter"></i> Highlight
                    </button>
                    <button class="edit-tool-btn" data-tool="rectangle">
                        <i class="fas fa-square"></i> Rectangle
                    </button>
                </div>

                <div class="edit-options" id="text-options">
                    <div class="option-group">
                        <label for="text-content">Text Content</label>
                        <textarea id="text-content" rows="3" placeholder="Enter text to add to the PDF"></textarea>
                    </div>
                    <div class="option-group">
                        <label>Text Color</label>
                        <div class="color-picker">
                            <div class="color-option active" style="background-color: #000000;" data-color="#000000"></div>
                            <div class="color-option" style="background-color: #ff0000;" data-color="#ff0000"></div>
                            <div class="color-option" style="background-color: #0000ff;" data-color="#0000ff"></div>
                            <div class="color-option" style="background-color: #008000;" data-color="#008000"></div>
                        </div>
                    </div>
                    <div class="option-group">
                        <label for="text-size">Font Size</label>
                        <input type="range" id="text-size" min="8" max="72" value="12">
                        <span id="text-size-value">12px</span>
                    </div>
                </div>

                <div class="edit-options" id="image-options">
                    <div class="option-group">
                        <label for="image-upload">Upload Image</label>
                        <input type="file" id="image-upload" accept=".jpg,.jpeg,.png,.gif">
                    </div>
                </div>

                <div class="edit-options" id="highlight-options">
                    <div class="option-group">
                        <label>Highlight Color</label>
                        <div class="color-picker">
                            <div class="color-option active" style="background-color: #ffff00;" data-color="#ffff00"></div>
                            <div class="color-option" style="background-color: #00ffff;" data-color="#00ffff"></div>
                            <div class="color-option" style="background-color: #ff99cc;" data-color="#ff99cc"></div>
                            <div class="color-option" style="background-color: #99ff99;" data-color="#99ff99"></div>
                        </div>
                    </div>
                </div>

                <div class="edit-options" id="rectangle-options">
                    <div class="option-group">
                        <label>Rectangle Color</label>
                        <div class="color-picker">
                            <div class="color-option active" style="background-color: #ff0000;" data-color="#ff0000"></div>
                            <div class="color-option" style="background-color: #0000ff;" data-color="#0000ff"></div>
                            <div class="color-option" style="background-color: #008000;" data-color="#008000"></div>
                            <div class="color-option" style="background-color: #000000;" data-color="#000000"></div>
                        </div>
                    </div>
                    <div class="option-group">
                        <label for="rectangle-width">Line Width</label>
                        <input type="range" id="rectangle-width" min="1" max="10" value="2">
                        <span id="rectangle-width-value">2px</span>
                    </div>
                </div>

                <div class="pdf-preview-container">
                    <iframe class="pdf-preview" id="pdf-preview"></iframe>
                    <div class="preview-overlay" id="preview-overlay"></div>
                </div>
                
                <div style="text-align: center; margin-top: 20px;">
                    <button class="btn btn-success" id="edit-pdf-save" disabled>Save Edited PDF</button>
                </div>
                
                <div class="progress-container" id="edit-pdf-progress">
                    <div class="progress-info">
                        <span>Processing...</span>
                        <span id="edit-pdf-progress-text">0%</span>
                    </div>
                    <div class="progress-bar">
                        <div class="progress" id="edit-pdf-progress-bar"></div>
                    </div>
                </div>
                
                <div class="result-area" id="edit-pdf-result">
                    <h3>Edit Complete!</h3>
                    <p>Your PDF has been successfully edited</p>
                    <button class="btn download-btn" id="edit-pdf-download">
                        <i class="fas fa-download"></i> Download Edited PDF
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Tool selection functionality
        document.querySelectorAll('.tool-card').forEach(card => {
            card.addEventListener('click', function() {
                const toolId = this.getAttribute('data-tool');
                
                // Hide all tool sections
                document.querySelectorAll('.tool-section').forEach(section => {
                    section.classList.remove('active');
                });
                
                // Show selected tool section
                document.getElementById(`${toolId}-tool`).classList.add('active');
                
                // Scroll to the tool section
                document.getElementById(`${toolId}-tool`).scrollIntoView({ behavior: 'smooth' });
            });
        });

        // ========== EXCEL TO PDF TOOL ==========
        const excelToPdfUpload = document.getElementById('excel-to-pdf-upload');
        const excelToPdfInput = document.getElementById('excel-to-pdf-input');
        const excelToPdfBrowse = document.getElementById('excel-to-pdf-browse');
        const excelToPdfFileList = document.getElementById('excel-to-pdf-file-list');
        const excelToPdfEmpty = document.getElementById('excel-to-pdf-empty');
        const excelToPdfConvert = document.getElementById('excel-to-pdf-convert');
        const excelToPdfProgress = document.getElementById('excel-to-pdf-progress');
        const excelToPdfProgressBar = document.getElementById('excel-to-pdf-progress-bar');
        const excelToPdfProgressText = document.getElementById('excel-to-pdf-progress-text');
        const excelToPdfResult = document.getElementById('excel-to-pdf-result');
        const excelToPdfDownload = document.getElementById('excel-to-pdf-download');

        // Store selected file
        let excelFile = null;

        // Browse button click
        excelToPdfBrowse.addEventListener('click', function() {
            excelToPdfInput.click();
        });

        // File input change
        excelToPdfInput.addEventListener('change', function(e) {
            if (e.target.files.length > 0) {
                handleExcelFileSelection(e.target.files[0]);
            }
        });

        // Drag and drop functionality
        excelToPdfUpload.addEventListener('dragover', function(e) {
            e.preventDefault();
            this.classList.add('active');
        });

        excelToPdfUpload.addEventListener('dragleave', function(e) {
            e.preventDefault();
            this.classList.remove('active');
        });

        excelToPdfUpload.addEventListener('drop', function(e) {
            e.preventDefault();
            this.classList.remove('active');
            
            if (e.dataTransfer.files.length > 0) {
                handleExcelFileSelection(e.dataTransfer.files[0]);
            }
        });

        // Handle file selection
        function handleExcelFileSelection(file) {
            const validTypes = [
                'application/vnd.ms-excel',
                'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
                'text/csv'
            ];
            
            if (!validTypes.includes(file.type) && !file.name.match(/\.(xlsx|xls|csv)$/)) {
                alert('Please select a valid Excel file (XLSX, XLS, CSV).');
                return;
            }
            
            excelFile = file;
            
            // Update UI
            updateExcelFileList();
            updateExcelConvertButton();
        }

        // Update file list display
        function updateExcelFileList() {
            if (!excelFile) {
                excelToPdfEmpty.style.display = 'block';
                excelToPdfFileList.innerHTML = '';
                excelToPdfFileList.appendChild(excelToPdfEmpty);
                return;
            }
            
            excelToPdfEmpty.style.display = 'none';
            
            // Clear existing list (except empty state)
            const fileListItems = excelToPdfFileList.querySelectorAll('.file-item');
            fileListItems.forEach(item => item.remove());
            
            // Add file to list
            const fileItem = document.createElement('div');
            fileItem.className = 'file-item';
            fileItem.innerHTML = `
                <div class="file-info">
                    <i class="fas fa-file-excel file-icon"></i>
                    <div class="file-details">
                        <h4>${excelFile.name}</h4>
                        <p>${formatFileSize(excelFile.size)}</p>
                    </div>
                </div>
                <div class="file-actions">
                    <button class="remove-file"><i class="fas fa-times"></i></button>
                </div>
            `;
            
            excelToPdfFileList.appendChild(fileItem);
            
            // Remove file functionality
            fileItem.querySelector('.remove-file').addEventListener('click', function() {
                excelFile = null;
                updateExcelFileList();
                updateExcelConvertButton();
            });
        }

        // Update convert button state
        function updateExcelConvertButton() {
            excelToPdfConvert.disabled = !excelFile;
        }

        // Format file size
        function formatFileSize(bytes) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        }

        // Convert button click
        excelToPdfConvert.addEventListener('click', function() {
            if (!excelFile) {
                alert('Please select an Excel file first.');
                return;
            }
            
            // Show progress
            excelToPdfProgress.style.display = 'block';
            excelToPdfProgressBar.style.width = '0%';
            excelToPdfProgressText.textContent = '0%';
            
            // Start conversion
            convertExcelToPdf();
        });

        // Convert Excel to PDF
        async function convertExcelToPdf() {
            try {
                // Get options
                const orientation = document.getElementById('excel-to-pdf-orientation').value;
                const pageSize = document.getElementById('excel-to-pdf-size').value;
                const scaling = document.getElementById('excel-to-pdf-scaling').value;
                
                // Initialize progress
                let progress = 0;
                
                // Update progress
                progress = 20;
                excelToPdfProgressBar.style.width = `${progress}%`;
                excelToPdfProgressText.textContent = `${progress}%`;
                
                // Read Excel file
                const reader = new FileReader();
                
                reader.onload = function(e) {
                    try {
                        const data = new Uint8Array(e.target.result);
                        const workbook = XLSX.read(data, { type: 'array' });
                        
                        // Update progress
                        progress = 50;
                        excelToPdfProgressBar.style.width = `${progress}%`;
                        excelToPdfProgressText.textContent = `${progress}%`;
                        
                        // Convert to PDF using jsPDF
                        const { jsPDF } = window.jspdf;
                        const pdf = new jsPDF({
                            orientation: orientation,
                            unit: 'mm',
                            format: pageSize
                        });
                        
                        // Process each worksheet
                        workbook.SheetNames.forEach((sheetName, index) => {
                            const worksheet = workbook.Sheets[sheetName];
                            const html = XLSX.utils.sheet_to_html(worksheet, { editable: false });
                            
                            // Add new page for each sheet (except first)
                            if (index > 0) {
                                pdf.addPage();
                            }
                            
                            // Add sheet name as title
                            pdf.setFontSize(16);
                            pdf.text(sheetName, 20, 20);
                            
                            // Convert HTML table to PDF (simplified approach)
                            // In a real implementation, you would parse the HTML and add content properly
                            pdf.setFontSize(10);
                            pdf.text('Excel content would be rendered here in a full implementation.', 20, 40);
                        });
                        
                        // Update progress
                        progress = 90;
                        excelToPdfProgressBar.style.width = `${progress}%`;
                        excelToPdfProgressText.textContent = `${progress}%`;
                        
                        // Generate PDF
                        const pdfBlob = pdf.output('blob');
                        const pdfUrl = URL.createObjectURL(pdfBlob);
                        
                        // Complete progress
                        excelToPdfProgressBar.style.width = '100%';
                        excelToPdfProgressText.textContent = '100%';
                        
                        // Show result
                        excelToPdfResult.style.display = 'block';
                        
                        // Set up download
                        excelToPdfDownload.onclick = function() {
                            const link = document.createElement('a');
                            link.href = pdfUrl;
                            link.download = excelFile.name.replace(/\.[^/.]+$/, "") + '.pdf';
                            document.body.appendChild(link);
                            link.click();
                            document.body.removeChild(link);
                        };
                        
                    } catch (error) {
                        console.error('Error processing Excel file:', error);
                        alert('Error processing Excel file. Please try another file.');
                    }
                };
                
                reader.onerror = function() {
                    alert('Error reading file. Please try again.');
                };
                
                reader.readAsArrayBuffer(excelFile);
                
            } catch (error) {
                console.error('Error converting Excel to PDF:', error);
                alert('An error occurred during conversion. Please try again.');
            }
        }

        // ========== EDIT PDF TOOL ==========
        const editPdfUpload = document.getElementById('edit-pdf-upload');
        const editPdfInput = document.getElementById('edit-pdf-input');
        const editPdfBrowse = document.getElementById('edit-pdf-browse');
        const editPdfFileList = document.getElementById('edit-pdf-file-list');
        const editPdfEmpty = document.getElementById('edit-pdf-empty');
        const editPdfSave = document.getElementById('edit-pdf-save');
        const editPdfProgress = document.getElementById('edit-pdf-progress');
        const editPdfProgressBar = document.getElementById('edit-pdf-progress-bar');
        const editPdfProgressText = document.getElementById('edit-pdf-progress-text');
        const editPdfResult = document.getElementById('edit-pdf-result');
        const editPdfDownload = document.getElementById('edit-pdf-download');
        const pdfPreview = document.getElementById('pdf-preview');
        const previewOverlay = document.getElementById('preview-overlay');

        // Store selected file and annotations
        let pdfFile = null;
        let pdfUrl = null;
        let annotations = [];
        let activeTool = null;

        // Edit tool buttons
        const editToolBtns = document.querySelectorAll('.edit-tool-btn');
        const editOptions = document.querySelectorAll('.edit-options');
        
        // Color pickers
        const colorOptions = document.querySelectorAll('.color-option');
        
        // Initialize edit tools
        editToolBtns.forEach(btn => {
            btn.addEventListener('click', function() {
                // Remove active class from all buttons
                editToolBtns.forEach(b => b.classList.remove('active'));
                // Add active class to clicked button
                this.classList.add('active');
                
                // Set active tool
                activeTool = this.getAttribute('data-tool');
                
                // Hide all options
                editOptions.forEach(option => option.classList.remove('active'));
                // Show options for active tool
                document.getElementById(`${activeTool}-options`).classList.add('active');
            });
        });

        // Initialize color pickers
        colorOptions.forEach(option => {
            option.addEventListener('click', function() {
                const parent = this.closest('.color-picker');
                parent.querySelectorAll('.color-option').forEach(opt => opt.classList.remove('active'));
                this.classList.add('active');
            });
        });

        // Text size slider
        const textSizeSlider = document.getElementById('text-size');
        const textSizeValue = document.getElementById('text-size-value');
        
        textSizeSlider.addEventListener('input', function() {
            textSizeValue.textContent = `${this.value}px`;
        });

        // Rectangle width slider
        const rectangleWidthSlider = document.getElementById('rectangle-width');
        const rectangleWidthValue = document.getElementById('rectangle-width-value');
        
        rectangleWidthSlider.addEventListener('input', function() {
            rectangleWidthValue.textContent = `${this.value}px`;
        });

        // Browse button click
        editPdfBrowse.addEventListener('click', function() {
            editPdfInput.click();
        });

        // File input change
        editPdfInput.addEventListener('change', function(e) {
            if (e.target.files.length > 0) {
                handlePdfFileSelection(e.target.files[0]);
            }
        });

        // Drag and drop functionality
        editPdfUpload.addEventListener('dragover', function(e) {
            e.preventDefault();
            this.classList.add('active');
        });

        editPdfUpload.addEventListener('dragleave', function(e) {
            e.preventDefault();
            this.classList.remove('active');
        });

        editPdfUpload.addEventListener('drop', function(e) {
            e.preventDefault();
            this.classList.remove('active');
            
            if (e.dataTransfer.files.length > 0) {
                handlePdfFileSelection(e.dataTransfer.files[0]);
            }
        });

        // Handle file selection
        function handlePdfFileSelection(file) {
            if (file.type !== 'application/pdf') {
                alert('Please select a PDF file.');
                return;
            }
            
            pdfFile = file;
            pdfUrl = URL.createObjectURL(file);
            
            // Update UI
            updatePdfFileList();
            updatePdfSaveButton();
            
            // Load PDF in preview
            pdfPreview.src = pdfUrl;
            
            // Clear previous annotations
            annotations = [];
            previewOverlay.innerHTML = '';
        }

        // Update file list display
        function updatePdfFileList() {
            if (!pdfFile) {
                editPdfEmpty.style.display = 'block';
                editPdfFileList.innerHTML = '';
                editPdfFileList.appendChild(editPdfEmpty);
                return;
            }
            
            editPdfEmpty.style.display = 'none';
            
            // Clear existing list (except empty state)
            const fileListItems = editPdfFileList.querySelectorAll('.file-item');
            fileListItems.forEach(item => item.remove());
            
            // Add file to list
            const fileItem = document.createElement('div');
            fileItem.className = 'file-item';
            fileItem.innerHTML = `
                <div class="file-info">
                    <i class="fas fa-file-pdf file-icon"></i>
                    <div class="file-details">
                        <h4>${pdfFile.name}</h4>
                        <p>${formatFileSize(pdfFile.size)}</p>
                    </div>
                </div>
                <div class="file-actions">
                    <button class="remove-file"><i class="fas fa-times"></i></button>
                </div>
            `;
            
            editPdfFileList.appendChild(fileItem);
            
            // Remove file functionality
            fileItem.querySelector('.remove-file').addEventListener('click', function() {
                pdfFile = null;
                if (pdfUrl) URL.revokeObjectURL(pdfUrl);
                pdfUrl = null;
                updatePdfFileList();
                updatePdfSaveButton();
                pdfPreview.src = '';
                annotations = [];
                previewOverlay.innerHTML = '';
            });
        }

        // Update save button state
        function updatePdfSaveButton() {
            editPdfSave.disabled = !pdfFile;
        }

        // Save button click
        editPdfSave.addEventListener('click', function() {
            if (!pdfFile) {
                alert('Please select a PDF file first.');
                return;
            }
            
            // Show progress
            editPdfProgress.style.display = 'block';
            editPdfProgressBar.style.width = '0%';
            editPdfProgressText.textContent = '0%';
            
            // Start editing
            editPdf();
        });

        // Edit PDF with annotations
        async function editPdf() {
            try {
                const { PDFDocument, rgb } = PDFLib;
                
                // Load the source PDF
                const arrayBuffer = await pdfFile.arrayBuffer();
                const pdfDoc = await PDFDocument.load(arrayBuffer);
                
                // Get the first page
                const pages = pdfDoc.getPages();
                const firstPage = pages[0];
                
                // Update progress
                editPdfProgressBar.style.width = '50%';
                editPdfProgressText.textContent = '50%';
                
                // In a real implementation, you would add the annotations to the PDF
                // For this demo, we'll just add a sample annotation
                firstPage.drawText('Edited with DocuMagic', {
                    x: 50,
                    y: firstPage.getHeight() - 50,
                    size: 12,
                    color: rgb(0.2, 0.2, 0.8),
                });
                
                // Update progress
                editPdfProgressBar.style.width = '90%';
                editPdfProgressText.textContent = '90%';
                
                // Save the PDF
                const pdfBytes = await pdfDoc.save();
                const editedPdfBlob = new Blob([pdfBytes], { type: 'application/pdf' });
                const editedPdfUrl = URL.createObjectURL(editedPdfBlob);
                
                // Complete progress
                editPdfProgressBar.style.width = '100%';
                editPdfProgressText.textContent = '100%';
                
                // Show result
                editPdfResult.style.display = 'block';
                
                // Set up download
                editPdfDownload.onclick = function() {
                    const link = document.createElement('a');
                    link.href = editedPdfUrl;
                    link.download = pdfFile.name.replace('.pdf', '-edited.pdf');
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);
                };
                
            } catch (error) {
                console.error('Error editing PDF:', error);
                alert('An error occurred during editing. Please try again.');
            }
        }

        // Note: In a full implementation, you would:
        // 1. Add click handlers to the PDF preview to place annotations
        // 2. Store annotation data (position, content, style)
        // 3. Apply annotations to the PDF when saving
        // This is a simplified version to demonstrate the concept
    </script>
</body>
</html>
